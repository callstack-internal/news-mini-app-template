{"version":3,"file":"vendors-node_modules_react-navigation_native-stack_src_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-navigation/native-stack/src/index.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/navigators/createNativeStackNavigator.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/utils/useDismissedRouteError.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/utils/useInvalidPreventRemoveError.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/views/DebugContainer.native.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/views/FontProcessor.native.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/views/HeaderConfig.tsx","webpack:///./node_modules/@react-navigation/native-stack/src/views/NativeStackView.native.tsx","webpack:///./node_modules/react-freeze/src/index.tsx","webpack:///./node_modules/react-native-screens/src/TransitionProgressContext.tsx","webpack:///./node_modules/react-native-screens/src/index.native.tsx","webpack:///./node_modules/react-native-screens/src/useTransitionProgress.tsx","webpack:///./node_modules/react-native-screens/src/utils.ts","webpack:///./node_modules/react-native/Libraries/Components/View/View.js","webpack:///./node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/ReactNative/AppContainer.js","webpack:///./node_modules/react-native/Libraries/ReactNative/RootTag.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js","webpack:///./node_modules/react-native/Libraries/Text/TextAncestor.js","webpack:///./node_modules/warn-once/index.js"],"sourcesContent":["/**\n * Navigators\n */\nexport { default as createNativeStackNavigator } from './navigators/createNativeStackNavigator';\n\n/**\n * Views\n */\nexport { default as NativeStackView } from './views/NativeStackView';\n\n/**\n * Types\n */\nexport type {\n  NativeStackHeaderProps,\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigationProp,\n  NativeStackScreenProps,\n} from './types';\n","import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n","import type {\n  ParamListBase,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nexport default function useInvalidPreventRemoveError(\n  state: StackNavigationState<ParamListBase>\n) {\n  const [nextDismissedKey, setNextDismissedKey] = React.useState<string | null>(\n    null\n  );\n\n  const dismissedRouteName = nextDismissedKey\n    ? state.routes.find((route) => route.key === nextDismissedKey)?.name\n    : null;\n\n  React.useEffect(() => {\n    if (dismissedRouteName) {\n      const message =\n        `The screen '${dismissedRouteName}' was removed natively but didn't get removed from JS state. ` +\n        `This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\\n\\n` +\n        `Consider using a 'usePreventRemove' hook with 'headerBackButtonMenuEnabled: false' to prevent users from natively going back multiple screens.`;\n\n      console.error(message);\n    }\n  }, [dismissedRouteName]);\n\n  return { setNextDismissedKey };\n}\n","import { usePreventRemoveContext } from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { NativeStackDescriptorMap } from '../types';\n\nexport default function useInvalidPreventRemoveError(\n  descriptors: NativeStackDescriptorMap\n) {\n  const { preventedRoutes } = usePreventRemoveContext();\n  const preventedRouteKey = Object.keys(preventedRoutes)[0];\n  const preventedDescriptor = descriptors[preventedRouteKey];\n  const isHeaderBackButtonMenuEnabledOnPreventedScreen =\n    preventedDescriptor?.options?.headerBackButtonMenuEnabled;\n  const preventedRouteName = preventedDescriptor?.route?.name;\n\n  React.useEffect(() => {\n    if (\n      preventedRouteKey != null &&\n      isHeaderBackButtonMenuEnabledOnPreventedScreen\n    ) {\n      const message =\n        `The screen ${preventedRouteName} uses 'usePreventRemove' hook alongside 'headerBackButtonMenuEnabled: true', which is not supported. \\n\\n` +\n        `Consider removing 'headerBackButtonMenuEnabled: true' from ${preventedRouteName} screen to get rid of this error.`;\n      console.error(message);\n    }\n  }, [\n    preventedRouteKey,\n    isHeaderBackButtonMenuEnabledOnPreventedScreen,\n    preventedRouteName,\n  ]);\n}\n","import * as React from 'react';\nimport { Platform, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport type { StackPresentationTypes } from 'react-native-screens';\n\ntype ContainerProps = ViewProps & {\n  stackPresentation: StackPresentationTypes;\n  children: React.ReactNode;\n};\n\nlet Container = View as unknown as React.ComponentType<ContainerProps>;\n\nif (process.env.NODE_ENV !== 'production') {\n  const DebugContainer = (props: ContainerProps) => {\n    const { stackPresentation, ...rest } = props;\n\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      // This is necessary for LogBox\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n\n    return <View {...rest} />;\n  };\n\n  Container = DebugContainer;\n}\n\nexport default Container;\n","// @ts-ignore: No declaration available\nimport ReactNativeStyleAttributes from 'react-native/Libraries/Components/View/ReactNativeStyleAttributes';\n\nexport function processFonts(\n  fontFamilies: (string | undefined)[]\n): (string | undefined)[] {\n  // @ts-ignore: React Native types are incorrect here and don't consider fontFamily a style value\n  const fontFamilyProcessor = ReactNativeStyleAttributes.fontFamily?.process;\n  if (typeof fontFamilyProcessor === 'function') {\n    return fontFamilies.map(fontFamilyProcessor);\n  }\n  return fontFamilies;\n}\n","import { getHeaderTitle, HeaderTitle } from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  I18nManager,\n  Platform,\n  StyleSheet,\n  TextStyle,\n  View,\n} from 'react-native';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderSearchBarView,\n  SearchBar,\n} from 'react-native-screens';\n\nimport type { NativeStackNavigationOptions } from '../types';\nimport { processFonts } from './FontProcessor';\n\ntype Props = NativeStackNavigationOptions & {\n  headerTopInsetEnabled: boolean;\n  headerHeight: number;\n  route: Route<string>;\n  canGoBack: boolean;\n};\n\nexport default function HeaderConfig({\n  headerHeight,\n  headerBackImageSource,\n  headerBackButtonMenuEnabled,\n  headerBackTitle,\n  headerBackTitleStyle,\n  headerBackTitleVisible = true,\n  headerBackVisible,\n  headerShadowVisible,\n  headerLargeStyle,\n  headerLargeTitle,\n  headerLargeTitleShadowVisible,\n  headerLargeTitleStyle,\n  headerBackground,\n  headerLeft,\n  headerRight,\n  headerShown,\n  headerStyle,\n  headerBlurEffect,\n  headerTintColor,\n  headerTitle,\n  headerTitleAlign,\n  headerTitleStyle,\n  headerTransparent,\n  headerSearchBarOptions,\n  headerTopInsetEnabled,\n  route,\n  title,\n  canGoBack,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor =\n    headerTintColor ?? (Platform.OS === 'ios' ? colors.primary : colors.text);\n\n  const headerBackTitleStyleFlattened =\n    StyleSheet.flatten(headerBackTitleStyle) || {};\n  const headerLargeTitleStyleFlattened =\n    StyleSheet.flatten(headerLargeTitleStyle) || {};\n  const headerTitleStyleFlattened = StyleSheet.flatten(headerTitleStyle) || {};\n  const headerStyleFlattened = StyleSheet.flatten(headerStyle) || {};\n  const headerLargeStyleFlattened = StyleSheet.flatten(headerLargeStyle) || {};\n\n  const [backTitleFontFamily, largeTitleFontFamily, titleFontFamily] =\n    processFonts([\n      headerBackTitleStyleFlattened.fontFamily,\n      headerLargeTitleStyleFlattened.fontFamily,\n      headerTitleStyleFlattened.fontFamily,\n    ]);\n\n  const titleText = getHeaderTitle({ title, headerTitle }, route.name);\n  const titleColor =\n    headerTitleStyleFlattened.color ?? headerTintColor ?? colors.text;\n  const titleFontSize = headerTitleStyleFlattened.fontSize;\n  const titleFontWeight = headerTitleStyleFlattened.fontWeight;\n\n  const headerTitleStyleSupported: TextStyle = { color: titleColor };\n\n  if (headerTitleStyleFlattened.fontFamily != null) {\n    headerTitleStyleSupported.fontFamily = headerTitleStyleFlattened.fontFamily;\n  }\n\n  if (titleFontSize != null) {\n    headerTitleStyleSupported.fontSize = titleFontSize;\n  }\n\n  if (titleFontWeight != null) {\n    headerTitleStyleSupported.fontWeight = titleFontWeight;\n  }\n\n  const headerLeftElement = headerLeft?.({\n    tintColor,\n    canGoBack,\n    label: headerBackTitle,\n  });\n  const headerRightElement = headerRight?.({\n    tintColor,\n    canGoBack,\n  });\n  const headerTitleElement =\n    typeof headerTitle === 'function'\n      ? headerTitle({\n          tintColor,\n          children: titleText,\n        })\n      : null;\n\n  const supportsHeaderSearchBar =\n    typeof isSearchBarAvailableForCurrentPlatform === 'boolean'\n      ? isSearchBarAvailableForCurrentPlatform\n      : // Fallback for older versions of react-native-screens\n        Platform.OS === 'ios' && SearchBar != null;\n\n  const hasHeaderSearchBar =\n    supportsHeaderSearchBar && headerSearchBarOptions != null;\n\n  if (headerSearchBarOptions != null && !supportsHeaderSearchBar) {\n    throw new Error(\n      `The current version of 'react-native-screens' doesn't support SearchBar in the header. Please update to the latest version to use this option.`\n    );\n  }\n\n  /**\n   * We need to set this in if:\n   * - Back button should stay visible when `headerLeft` is specified\n   * - If `headerTitle` for Android is specified, so we only need to remove the title and keep the back button\n   */\n  const backButtonInCustomView = headerBackVisible\n    ? headerLeftElement != null\n    : Platform.OS === 'android' && headerTitleElement != null;\n\n  const translucent =\n    headerBackground != null ||\n    headerTransparent ||\n    // When using a SearchBar or large title, the header needs to be translucent for it to work on iOS\n    ((hasHeaderSearchBar || headerLargeTitle) &&\n      Platform.OS === 'ios' &&\n      headerTransparent !== false);\n\n  return (\n    <>\n      {headerBackground != null ? (\n        <View\n          style={[\n            styles.background,\n            headerTransparent ? styles.translucent : null,\n            { height: headerHeight },\n          ]}\n        >\n          {headerBackground()}\n        </View>\n      ) : null}\n      <ScreenStackHeaderConfig\n        backButtonInCustomView={backButtonInCustomView}\n        backgroundColor={\n          headerStyleFlattened.backgroundColor ??\n          (headerBackground != null || headerTransparent\n            ? 'transparent'\n            : colors.card)\n        }\n        backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n        backTitleFontFamily={backTitleFontFamily}\n        backTitleFontSize={headerBackTitleStyleFlattened.fontSize}\n        blurEffect={headerBlurEffect}\n        color={tintColor}\n        direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n        disableBackButtonMenu={headerBackButtonMenuEnabled === false}\n        hidden={headerShown === false}\n        hideBackButton={headerBackVisible === false}\n        hideShadow={\n          headerShadowVisible === false ||\n          headerBackground != null ||\n          headerTransparent\n        }\n        largeTitle={headerLargeTitle}\n        largeTitleBackgroundColor={headerLargeStyleFlattened.backgroundColor}\n        largeTitleColor={headerLargeTitleStyleFlattened.color}\n        largeTitleFontFamily={largeTitleFontFamily}\n        largeTitleFontSize={headerLargeTitleStyleFlattened.fontSize}\n        largeTitleFontWeight={headerLargeTitleStyleFlattened.fontWeight}\n        largeTitleHideShadow={headerLargeTitleShadowVisible === false}\n        title={titleText}\n        titleColor={titleColor}\n        titleFontFamily={titleFontFamily}\n        titleFontSize={titleFontSize}\n        titleFontWeight={titleFontWeight}\n        topInsetEnabled={headerTopInsetEnabled}\n        translucent={\n          // This defaults to `true`, so we can't pass `undefined`\n          translucent === true\n        }\n      >\n        {Platform.OS === 'ios' ? (\n          <>\n            {headerLeftElement != null ? (\n              <ScreenStackHeaderLeftView>\n                {headerLeftElement}\n              </ScreenStackHeaderLeftView>\n            ) : null}\n            {headerTitleElement != null ? (\n              <ScreenStackHeaderCenterView>\n                {headerTitleElement}\n              </ScreenStackHeaderCenterView>\n            ) : null}\n          </>\n        ) : (\n          <>\n            {headerLeftElement != null || typeof headerTitle === 'function' ? (\n              <ScreenStackHeaderLeftView>\n                <View style={styles.row}>\n                  {headerLeftElement}\n                  {headerTitleAlign !== 'center' ? (\n                    typeof headerTitle === 'function' ? (\n                      headerTitleElement\n                    ) : (\n                      <HeaderTitle\n                        tintColor={tintColor}\n                        style={headerTitleStyleSupported}\n                      >\n                        {titleText}\n                      </HeaderTitle>\n                    )\n                  ) : null}\n                </View>\n              </ScreenStackHeaderLeftView>\n            ) : null}\n            {headerTitleAlign === 'center' ? (\n              <ScreenStackHeaderCenterView>\n                {typeof headerTitle === 'function' ? (\n                  headerTitleElement\n                ) : (\n                  <HeaderTitle\n                    tintColor={tintColor}\n                    style={headerTitleStyleSupported}\n                  >\n                    {titleText}\n                  </HeaderTitle>\n                )}\n              </ScreenStackHeaderCenterView>\n            ) : null}\n          </>\n        )}\n        {headerBackImageSource !== undefined ? (\n          <ScreenStackHeaderBackButtonImage source={headerBackImageSource} />\n        ) : null}\n        {headerRightElement != null ? (\n          <ScreenStackHeaderRightView>\n            {headerRightElement}\n          </ScreenStackHeaderRightView>\n        ) : null}\n        {hasHeaderSearchBar ? (\n          <ScreenStackHeaderSearchBarView>\n            <SearchBar {...headerSearchBarOptions} />\n          </ScreenStackHeaderSearchBarView>\n        ) : null}\n      </ScreenStackHeaderConfig>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  translucent: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1,\n  },\n  background: {\n    overflow: 'hidden',\n  },\n});\n","import {\n  getDefaultHeaderHeight,\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n  usePreventRemoveContext,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport type { ScreenProps } from 'react-native-screens';\nimport {\n  Screen,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport warnOnce from 'warn-once';\n\nimport type {\n  NativeStackDescriptor,\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport useDismissedRouteError from '../utils/useDismissedRouteError';\nimport useInvalidPreventRemoveError from '../utils/useInvalidPreventRemoveError';\nimport DebugContainer from './DebugContainer';\nimport HeaderConfig from './HeaderConfig';\n\nconst isAndroid = Platform.OS === 'android';\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  headerHeight,\n  headerTopInsetEnabled,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  headerHeight: number;\n  headerTopInsetEnabled: boolean;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { header, headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true && header === undefined;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <DebugContainer\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </DebugContainer>\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig\n            {...options}\n            route={route}\n            headerHeight={headerHeight}\n            headerTopInsetEnabled={headerTopInsetEnabled}\n            canGoBack\n          />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype SceneViewProps = {\n  index: number;\n  descriptor: NativeStackDescriptor;\n  previousDescriptor?: NativeStackDescriptor;\n  nextDescriptor?: NativeStackDescriptor;\n  onWillDisappear: () => void;\n  onAppear: () => void;\n  onDisappear: () => void;\n  onDismissed: ScreenProps['onDismissed'];\n  onHeaderBackButtonClicked: ScreenProps['onHeaderBackButtonClicked'];\n  onNativeDismissCancelled: ScreenProps['onDismissed'];\n};\n\nconst SceneView = ({\n  descriptor,\n  previousDescriptor,\n  nextDescriptor,\n  index,\n  onWillDisappear,\n  onAppear,\n  onDisappear,\n  onDismissed,\n  onHeaderBackButtonClicked,\n  onNativeDismissCancelled,\n}: SceneViewProps) => {\n  const { route, navigation, options, render } = descriptor;\n  const {\n    animationDuration,\n    animationTypeForReplace = 'push',\n    gestureEnabled,\n    header,\n    headerBackButtonMenuEnabled,\n    headerShown,\n    headerTransparent,\n    autoHideHomeIndicator,\n    navigationBarColor,\n    navigationBarHidden,\n    orientation,\n    statusBarAnimation,\n    statusBarHidden,\n    statusBarStyle,\n    statusBarTranslucent,\n    statusBarColor,\n    freezeOnBlur,\n  } = options;\n\n  let {\n    animation,\n    customAnimationOnGesture,\n    fullScreenGestureEnabled,\n    presentation = 'card',\n    gestureDirection = presentation === 'card' ? 'horizontal' : 'vertical',\n  } = options;\n\n  if (gestureDirection === 'vertical' && Platform.OS === 'ios') {\n    // for `vertical` direction to work, we need to set `fullScreenGestureEnabled` to `true`\n    // so the screen can be dismissed from any point on screen.\n    // `customAnimationOnGesture` needs to be set to `true` so the `animation` set by user can be used,\n    // otherwise `simple_push` will be used.\n    // Also, the default animation for this direction seems to be `slide_from_bottom`.\n    if (fullScreenGestureEnabled === undefined) {\n      fullScreenGestureEnabled = true;\n    }\n    if (customAnimationOnGesture === undefined) {\n      customAnimationOnGesture = true;\n    }\n    if (animation === undefined) {\n      animation = 'slide_from_bottom';\n    }\n  }\n\n  // workaround for rn-screens where gestureDirection has to be set on both\n  // current and previous screen - software-mansion/react-native-screens/pull/1509\n  const nextGestureDirection = nextDescriptor?.options.gestureDirection;\n  const gestureDirectionOverride =\n    nextGestureDirection != null ? nextGestureDirection : gestureDirection;\n\n  if (index === 0) {\n    // first screen should always be treated as `card`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `card`\n    presentation = 'card';\n  }\n\n  const insets = useSafeAreaInsets();\n  const frame = useSafeAreaFrame();\n\n  // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.\n  const isModal = presentation === 'modal' || presentation === 'formSheet';\n\n  // Modals are fullscreen in landscape only on iPhone\n  const isIPhone =\n    Platform.OS === 'ios' && !(Platform.isPad || Platform.isTVOS);\n  const isLandscape = frame.width > frame.height;\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  const topInset =\n    isParentHeaderShown ||\n    (Platform.OS === 'ios' && isModal) ||\n    (isIPhone && isLandscape)\n      ? 0\n      : insets.top;\n\n  const { preventedRoutes } = usePreventRemoveContext();\n\n  const defaultHeaderHeight = getDefaultHeaderHeight(frame, isModal, topInset);\n\n  const [customHeaderHeight, setCustomHeaderHeight] =\n    React.useState(defaultHeaderHeight);\n\n  const headerTopInsetEnabled = topInset !== 0;\n  const headerHeight = header ? customHeaderHeight : defaultHeaderHeight;\n  const headerBack = previousDescriptor\n    ? {\n        title: getHeaderTitle(\n          previousDescriptor.options,\n          previousDescriptor.route.name\n        ),\n      }\n    : parentHeaderBack;\n\n  const isRemovePrevented = preventedRoutes[route.key]?.preventRemove;\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      style={StyleSheet.absoluteFill}\n      customAnimationOnSwipe={customAnimationOnGesture}\n      fullScreenSwipeEnabled={fullScreenGestureEnabled}\n      gestureEnabled={\n        isAndroid\n          ? // This prop enables handling of system back gestures on Android\n            // Since we handle them in JS side, we disable this\n            false\n          : gestureEnabled\n      }\n      homeIndicatorHidden={autoHideHomeIndicator}\n      navigationBarColor={navigationBarColor}\n      navigationBarHidden={navigationBarHidden}\n      replaceAnimation={animationTypeForReplace}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n      stackAnimation={animation}\n      screenOrientation={orientation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      statusBarColor={statusBarColor}\n      statusBarTranslucent={statusBarTranslucent}\n      swipeDirection={gestureDirectionOverride}\n      transitionDuration={animationDuration}\n      onWillDisappear={onWillDisappear}\n      onAppear={onAppear}\n      onDisappear={onDisappear}\n      onDismissed={onDismissed}\n      isNativeStack\n      nativeBackButtonDismissalEnabled={false} // on Android\n      onHeaderBackButtonClicked={onHeaderBackButtonClicked}\n      // @ts-ignore props not exported from rn-screens\n      preventNativeDismiss={isRemovePrevented} // on iOS\n      onNativeDismissCancelled={onNativeDismissCancelled}\n      // this prop is available since rn-screens 3.16\n      freezeOnBlur={freezeOnBlur}\n    >\n      <NavigationContext.Provider value={navigation}>\n        <NavigationRouteContext.Provider value={route}>\n          <HeaderShownContext.Provider\n            value={isParentHeaderShown || headerShown !== false}\n          >\n            <HeaderHeightContext.Provider\n              value={\n                headerShown !== false ? headerHeight : parentHeaderHeight ?? 0\n              }\n            >\n              {/**\n               * `HeaderConfig` needs to be the direct child of `Screen` without any intermediate `View`\n               * We don't render it conditionally to make it possible to dynamically render a custom `header`\n               * Otherwise dynamically rendering a custom `header` leaves the native header visible\n               *\n               * https://github.com/software-mansion/react-native-screens/blob/main/guides/GUIDE_FOR_LIBRARY_AUTHORS.md#screenstackheaderconfig\n               */}\n              <HeaderConfig\n                {...options}\n                route={route}\n                headerBackButtonMenuEnabled={\n                  isRemovePrevented !== undefined\n                    ? !isRemovePrevented\n                    : headerBackButtonMenuEnabled\n                }\n                headerShown={header !== undefined ? false : headerShown}\n                headerHeight={headerHeight}\n                headerBackTitle={\n                  options.headerBackTitle !== undefined\n                    ? options.headerBackTitle\n                    : undefined\n                }\n                headerTopInsetEnabled={headerTopInsetEnabled}\n                canGoBack={headerBack !== undefined}\n              />\n              <View style={styles.scene}>\n                <MaybeNestedStack\n                  options={options}\n                  route={route}\n                  presentation={presentation}\n                  headerHeight={headerHeight}\n                  headerTopInsetEnabled={headerTopInsetEnabled}\n                >\n                  <HeaderBackContext.Provider value={headerBack}>\n                    {render()}\n                  </HeaderBackContext.Provider>\n                </MaybeNestedStack>\n                {header !== undefined && headerShown !== false ? (\n                  <View\n                    onLayout={(e) => {\n                      setCustomHeaderHeight(e.nativeEvent.layout.height);\n                    }}\n                    style={headerTransparent ? styles.absolute : null}\n                  >\n                    {header({\n                      back: headerBack,\n                      options,\n                      route,\n                      navigation,\n                    })}\n                  </View>\n                ) : null}\n              </View>\n            </HeaderHeightContext.Provider>\n          </HeaderShownContext.Provider>\n        </NavigationRouteContext.Provider>\n      </NavigationContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  const { setNextDismissedKey } = useDismissedRouteError(state);\n\n  useInvalidPreventRemoveError(descriptors);\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const previousKey = state.routes[index - 1]?.key;\n        const nextKey = state.routes[index + 1]?.key;\n        const previousDescriptor = previousKey\n          ? descriptors[previousKey]\n          : undefined;\n        const nextDescriptor = nextKey ? descriptors[nextKey] : undefined;\n\n        return (\n          <SceneView\n            key={route.key}\n            index={index}\n            descriptor={descriptor}\n            previousDescriptor={previousDescriptor}\n            nextDescriptor={nextDescriptor}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={(event) => {\n              navigation.dispatch({\n                ...StackActions.pop(event.nativeEvent.dismissCount),\n                source: route.key,\n                target: state.key,\n              });\n\n              setNextDismissedKey(route.key);\n            }}\n            onHeaderBackButtonClicked={() => {\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n            onNativeDismissCancelled={(event) => {\n              navigation.dispatch({\n                ...StackActions.pop(event.nativeEvent.dismissCount),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          />\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scene: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n","import React, { useRef, Suspense, Fragment } from \"react\";\n\ninterface StorageRef {\n  promise?: Promise<void>;\n  resolve?: (value: void | PromiseLike<void>) => void;\n}\n\nfunction Suspender({\n  freeze,\n  children,\n}: {\n  freeze: boolean;\n  children: React.ReactNode;\n}) {\n  const promiseCache = useRef<StorageRef>({}).current;\n  if (freeze && !promiseCache.promise) {\n    promiseCache.promise = new Promise((resolve) => {\n      promiseCache.resolve = resolve;\n    });\n    throw promiseCache.promise;\n  } else if (freeze) {\n    throw promiseCache.promise;\n  } else if (promiseCache.promise) {\n    promiseCache.resolve!();\n    promiseCache.promise = undefined;\n  }\n\n  return <Fragment>{children}</Fragment>;\n}\n\ninterface Props {\n  freeze: boolean;\n  children: React.ReactNode;\n  placeholder?: React.ReactNode;\n}\n\nexport function Freeze({ freeze, children, placeholder = null }: Props) {\n  return (\n    <Suspense fallback={placeholder}>\n      <Suspender freeze={freeze}>{children}</Suspender>\n    </Suspense>\n  );\n}\n","import * as React from 'react';\nimport { Animated } from 'react-native';\n\ntype TransitionProgressContextBody = {\n  progress: Animated.Value;\n  closing: Animated.Value;\n  goingForward: Animated.Value;\n};\n\nexport default React.createContext<TransitionProgressContextBody | undefined>(\n  undefined\n);\n","import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  const { children, ...rest } = props;\n  const size = React.Children.count(children);\n  // freezes all screens except the top one\n  const childrenWithFreeze = React.Children.map(children, (child, index) => {\n    // @ts-expect-error it's either SceneView in v6 or RouteView in v5\n    const { props, key } = child;\n    const descriptor = props?.descriptor ?? props?.descriptors?.[key];\n    const freezeEnabled = descriptor?.options?.freezeOnBlur ?? ENABLE_FREEZE;\n\n    return (\n      <DelayedFreeze freeze={freezeEnabled && size - index > 1}>\n        {child}\n      </DelayedFreeze>\n    );\n  });\n\n  return (\n    <ScreensNativeModules.NativeScreenStack {...rest}>\n      {childrenWithFreeze}\n    </ScreensNativeModules.NativeScreenStack>\n  );\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass InnerScreen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const {\n      enabled = ENABLE_SCREENS,\n      freezeOnBlur = ENABLE_FREEZE,\n      ...rest\n    } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        gestureResponseDistance,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const handleRef = (ref: ViewConfig) => {\n        if (ref?.viewConfig?.validAttributes?.style) {\n          ref.viewConfig.validAttributes.style = {\n            ...ref.viewConfig.validAttributes.style,\n            display: false,\n          };\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <DelayedFreeze freeze={freezeOnBlur && activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            activityState={activityState}\n            gestureResponseDistance={{\n              start: gestureResponseDistance?.start ?? -1,\n              end: gestureResponseDistance?.end ?? -1,\n              top: gestureResponseDistance?.top ?? -1,\n              bottom: gestureResponseDistance?.bottom ?? -1,\n            }}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </DelayedFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `useReanimatedTransitionProgress` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(InnerScreen);\n\nclass Screen extends React.Component<ScreenProps> {\n  static contextType = ScreenContext;\n\n  render() {\n    const ScreenWrapper = this.context || InnerScreen;\n    return <ScreenWrapper {...this.props} />;\n  }\n}\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n  InnerScreen,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n","import * as React from 'react';\n\nimport TransitionProgressContext from './TransitionProgressContext';\n\nexport default function useTransitionProgress() {\n  const progress = React.useContext(TransitionProgressContext);\n\n  if (progress === undefined) {\n    throw new Error(\n      \"Couldn't find values for transition progress. Are you inside a screen in Native Stack?\"\n    );\n  }\n\n  return progress;\n}\n","import { BackHandler, Platform } from 'react-native';\n\nexport const isSearchBarAvailableForCurrentPlatform = [\n  'ios',\n  'android',\n].includes(Platform.OS);\n\nexport function executeNativeBackPress() {\n  // This function invokes the native back press event\n  BackHandler.exitApp();\n  return true;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewProps} from './ViewPropTypes';\n\nimport ViewNativeComponent from './ViewNativeComponent';\nimport TextAncestor from '../../Text/TextAncestor';\nimport * as React from 'react';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, View is a container that\n * supports layout with flexbox, style, some touch handling, and accessibility\n * controls.\n *\n * @see https://reactnative.dev/docs/view\n */\nconst View: React.AbstractComponent<\n  ViewProps,\n  React.ElementRef<typeof ViewNativeComponent>,\n> = React.forwardRef((props: ViewProps, forwardedRef) => {\n  return (\n    <TextAncestor.Provider value={false}>\n      <ViewNativeComponent {...props} ref={forwardedRef} />\n    </TextAncestor.Provider>\n  );\n});\n\nView.displayName = 'View';\n\nmodule.exports = View;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport {type ViewProps as Props} from './ViewPropTypes';\nimport Platform from '../../Utilities/Platform';\n\nimport * as React from 'react';\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig =\n  Platform.OS === 'android'\n    ? {\n        uiViewClassName: 'RCTView',\n        validAttributes: {\n          // ReactClippingViewManager @ReactProps\n          removeClippedSubviews: true,\n\n          // ReactViewManager @ReactProps\n          accessible: true,\n          hasTVPreferredFocus: true,\n          nextFocusDown: true,\n          nextFocusForward: true,\n          nextFocusLeft: true,\n          nextFocusRight: true,\n          nextFocusUp: true,\n\n          borderRadius: true,\n          borderTopLeftRadius: true,\n          borderTopRightRadius: true,\n          borderBottomRightRadius: true,\n          borderBottomLeftRadius: true,\n          borderTopStartRadius: true,\n          borderTopEndRadius: true,\n          borderBottomStartRadius: true,\n          borderBottomEndRadius: true,\n\n          borderStyle: true,\n          hitSlop: true,\n          pointerEvents: true,\n          nativeBackgroundAndroid: true,\n          nativeForegroundAndroid: true,\n          needsOffscreenAlphaCompositing: true,\n\n          borderWidth: true,\n          borderLeftWidth: true,\n          borderRightWidth: true,\n          borderTopWidth: true,\n          borderBottomWidth: true,\n          borderStartWidth: true,\n          borderEndWidth: true,\n\n          borderColor: {process: require('../../StyleSheet/processColor')},\n          borderLeftColor: {process: require('../../StyleSheet/processColor')},\n          borderRightColor: {process: require('../../StyleSheet/processColor')},\n          borderTopColor: {process: require('../../StyleSheet/processColor')},\n          borderBottomColor: {\n            process: require('../../StyleSheet/processColor'),\n          },\n          borderStartColor: {process: require('../../StyleSheet/processColor')},\n          borderEndColor: {process: require('../../StyleSheet/processColor')},\n\n          focusable: true,\n          overflow: true,\n          backfaceVisibility: true,\n        },\n      }\n    : {\n        uiViewClassName: 'RCTView',\n      };\n\nconst ViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>('RCTView', () => __INTERNAL_VIEW_CONFIG);\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ViewNativeComponent;\n\nexport type ViewNativeComponentType = HostComponent<Props>;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport View from '../Components/View/View';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport {RootTagContext, createRootTag} from './RootTag';\nimport type {RootTag} from './RootTag';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  children?: React.Node,\n  fabric?: boolean,\n  useConcurrentRoot?: boolean,\n  rootTag: number | RootTag,\n  initialProps?: {...},\n  showArchitectureIndicator?: boolean,\n  WrapperComponent?: ?React.ComponentType<any>,\n  internal_excludeLogBox?: ?boolean,\n|}>;\n\ntype State = {|\n  inspector: ?React.Node,\n  mainKey: number,\n  hasError: boolean,\n|};\n\nclass AppContainer extends React.Component<Props, State> {\n  state: State = {\n    inspector: null,\n    mainKey: 1,\n    hasError: false,\n  };\n  _mainRef: ?React.ElementRef<typeof View>;\n  _subscription: ?EventSubscription = null;\n\n  static getDerivedStateFromError: any = undefined;\n\n  componentDidMount(): void {\n    if (__DEV__) {\n      if (!global.__RCTProfileIsProfiling) {\n        this._subscription = RCTDeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            const Inspector = require('../Inspector/Inspector');\n            const inspector = this.state.inspector ? null : (\n              <Inspector\n                inspectedView={this._mainRef}\n                onRequestRerenderApp={updateInspectedView => {\n                  this.setState(\n                    s => ({mainKey: s.mainKey + 1}),\n                    () => updateInspectedView(this._mainRef),\n                  );\n                }}\n              />\n            );\n            this.setState({inspector});\n          },\n        );\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this._subscription != null) {\n      this._subscription.remove();\n    }\n  }\n\n  render(): React.Node {\n    let logBox = null;\n    if (__DEV__) {\n      if (\n        !global.__RCTProfileIsProfiling &&\n        !this.props.internal_excludeLogBox\n      ) {\n        const LogBoxNotificationContainer =\n          require('../LogBox/LogBoxNotificationContainer').default;\n        logBox = <LogBoxNotificationContainer />;\n      }\n    }\n\n    let innerView: React.Node = (\n      <View\n        collapsable={!this.state.inspector}\n        key={this.state.mainKey}\n        pointerEvents=\"box-none\"\n        style={styles.appContainer}\n        ref={ref => {\n          this._mainRef = ref;\n        }}>\n        {this.props.children}\n      </View>\n    );\n\n    const Wrapper = this.props.WrapperComponent;\n    if (Wrapper != null) {\n      innerView = (\n        <Wrapper\n          initialProps={this.props.initialProps}\n          fabric={this.props.fabric === true}\n          showArchitectureIndicator={\n            this.props.showArchitectureIndicator === true\n          }>\n          {innerView}\n        </Wrapper>\n      );\n    }\n    return (\n      <RootTagContext.Provider value={createRootTag(this.props.rootTag)}>\n        <View style={styles.appContainer} pointerEvents=\"box-none\">\n          {!this.state.hasError && innerView}\n          {this.state.inspector}\n          {logBox}\n        </View>\n      </RootTagContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appContainer: {\n    flex: 1,\n  },\n});\n\nmodule.exports = AppContainer;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport * as React from 'react';\n\n// TODO: Make this into an opaque type.\nexport opaque type RootTag = number;\n\nexport const RootTagContext: React$Context<RootTag> =\n  React.createContext<RootTag>(0);\n\nif (__DEV__) {\n  RootTagContext.displayName = 'RootTagContext';\n}\n\n/**\n * Intended to only be used by `AppContainer`.\n */\nexport function createRootTag(rootTag: number | RootTag): RootTag {\n  return rootTag;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');\n\nconst flatten = require('./flattenStyle');\n\nimport type {\n  ____ColorValue_Internal,\n  ____Styles_Internal,\n  ____DangerouslyImpreciseStyle_Internal,\n  ____DangerouslyImpreciseStyleProp_Internal,\n  ____ViewStyle_Internal,\n  ____ViewStyleProp_Internal,\n  ____TextStyle_Internal,\n  ____TextStyleProp_Internal,\n  ____ImageStyle_Internal,\n  ____ImageStyleProp_Internal,\n} from './StyleSheetTypes';\n\n/**\n * This type should be used as the type for anything that is a color. It is\n * most useful when using DynamicColorIOS which can be a string or a dynamic\n * color object.\n *\n * type props = {backgroundColor: ColorValue};\n */\nexport type ColorValue = ____ColorValue_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <View>'s `style` prop. This ensures call sites of the component\n * can't pass styles that View doesn't support such as `fontSize`.`\n *\n * type Props = {style: ViewStyleProp}\n * const MyComponent = (props: Props) => <View style={props.style} />\n */\nexport type ViewStyleProp = ____ViewStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <Text>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Text doesn't support such as `resizeMode`.`\n *\n * type Props = {style: TextStyleProp}\n * const MyComponent = (props: Props) => <Text style={props.style} />\n */\nexport type TextStyleProp = ____TextStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to an <Image>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Image doesn't support such as `fontSize`.`\n *\n * type Props = {style: ImageStyleProp}\n * const MyComponent = (props: Props) => <Image style={props.style} />\n */\nexport type ImageStyleProp = ____ImageStyleProp_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type\n * is similar to the ones above except it allows styles that are accepted\n * by all of View, Text, or Image. It is therefore very unsafe to pass this\n * through to an underlying component. Using this is almost always a mistake\n * and using one of the other more restrictive types is likely the right choice.\n */\nexport type DangerouslyImpreciseStyleProp =\n  ____DangerouslyImpreciseStyleProp_Internal;\n\n/**\n * Utility type for getting the values for specific style keys.\n *\n * The following is bad because position is more restrictive than 'string':\n * ```\n * type Props = {position: string};\n * ```\n *\n * You should use the following instead:\n *\n * ```\n * type Props = {position: TypeForStyleKey<'position'>};\n * ```\n *\n * This will correctly give you the type 'absolute' | 'relative'\n */\nexport type TypeForStyleKey<\n  +key: $Keys<____DangerouslyImpreciseStyle_Internal>,\n> = $ElementType<____DangerouslyImpreciseStyle_Internal, key>;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for View.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ViewStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a View that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ViewStyle = ____ViewStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Text.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using TextStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a Text that can't be precomputed with\n * StyleSheet.create.\n */\nexport type TextStyle = ____TextStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Image.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ImageStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to an Image that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ImageStyle = ____ImageStyle_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type is an object\n * with all possible style keys and their values. Note that this isn't\n * a safe way to type a style prop for a component as results from\n * StyleSheet.create return an internal identifier, not an object of styles.\n *\n * If you want to type the style prop of a function, consider using\n * ViewStyleProp, TextStyleProp, or ImageStyleProp.\n *\n * This should only be used by very core utilities that operate on an object\n * containing any possible style value.\n */\nexport type DangerouslyImpreciseStyle = ____DangerouslyImpreciseStyle_Internal;\n\nlet hairlineWidth: number = PixelRatio.roundToNearestPixel(0.4);\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / PixelRatio.get();\n}\n\nconst absoluteFill = {\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n};\nif (__DEV__) {\n  Object.freeze(absoluteFill);\n}\n\n/**\n * A StyleSheet is an abstraction similar to CSS StyleSheets\n *\n * Create a new StyleSheet:\n *\n * ```\n * const styles = StyleSheet.create({\n *   container: {\n *     borderRadius: 4,\n *     borderWidth: 0.5,\n *     borderColor: '#d6d7da',\n *   },\n *   title: {\n *     fontSize: 19,\n *     fontWeight: 'bold',\n *   },\n *   activeTitle: {\n *     color: 'red',\n *   },\n * });\n * ```\n *\n * Use a StyleSheet:\n *\n * ```\n * <View style={styles.container}>\n *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />\n * </View>\n * ```\n *\n * Code quality:\n *\n *  - By moving styles away from the render function, you're making the code\n *  easier to understand.\n *  - Naming the styles is a good way to add meaning to the low level components\n *  in the render function.\n *\n * Performance:\n *\n *  - Making a stylesheet from a style object makes it possible to refer to it\n * by ID instead of creating a new style object every time.\n *  - It also allows to send the style only once through the bridge. All\n * subsequent uses are going to refer an id (not implemented yet).\n */\nmodule.exports = {\n  /**\n   * This is defined as the width of a thin line on the platform. It can be\n   * used as the thickness of a border or division between two elements.\n   * Example:\n   * ```\n   *   {\n   *     borderBottomColor: '#bbb',\n   *     borderBottomWidth: StyleSheet.hairlineWidth\n   *   }\n   * ```\n   *\n   * This constant will always be a round number of pixels (so a line defined\n   * by it look crisp) and will try to match the standard width of a thin line\n   * on the underlying platform. However, you should not rely on it being a\n   * constant size, because on different platforms and screen densities its\n   * value may be calculated differently.\n   *\n   * A line with hairline width may not be visible if your simulator is downscaled.\n   */\n  hairlineWidth,\n\n  /**\n   * A very common pattern is to create overlays with position absolute and zero positioning,\n   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated\n   * styles.\n   */\n  absoluteFill: (absoluteFill: any), // TODO: This should be updated after we fix downstream Flow sites.\n\n  /**\n   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be\n   * used to create a customized entry in a `StyleSheet`, e.g.:\n   *\n   *   const styles = StyleSheet.create({\n   *     wrapper: {\n   *       ...StyleSheet.absoluteFillObject,\n   *       top: 10,\n   *       backgroundColor: 'transparent',\n   *     },\n   *   });\n   */\n  absoluteFillObject: absoluteFill,\n\n  /**\n   * Combines two styles such that `style2` will override any styles in `style1`.\n   * If either style is falsy, the other one is returned without allocating an\n   * array, saving allocations and maintaining reference equality for\n   * PureComponent checks.\n   */\n  compose<T: DangerouslyImpreciseStyleProp>(\n    style1: ?T,\n    style2: ?T,\n  ): ?T | $ReadOnlyArray<T> {\n    if (style1 != null && style2 != null) {\n      return ([style1, style2]: $ReadOnlyArray<T>);\n    } else {\n      return style1 != null ? style1 : style2;\n    }\n  },\n\n  /**\n   * Flattens an array of style objects, into one aggregated style object.\n   * Alternatively, this method can be used to lookup IDs, returned by\n   * StyleSheet.register.\n   *\n   * > **NOTE**: Exercise caution as abusing this can tax you in terms of\n   * > optimizations.\n   * >\n   * > IDs enable optimizations through the bridge and memory in general. Referring\n   * > to style objects directly will deprive you of these optimizations.\n   *\n   * Example:\n   * ```\n   * const styles = StyleSheet.create({\n   *   listItem: {\n   *     flex: 1,\n   *     fontSize: 16,\n   *     color: 'white'\n   *   },\n   *   selectedListItem: {\n   *     color: 'green'\n   *   }\n   * });\n   *\n   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n   * // returns { flex: 1, fontSize: 16, color: 'green' }\n   * ```\n   * Alternative use:\n   * ```\n   * StyleSheet.flatten(styles.listItem);\n   * // return { flex: 1, fontSize: 16, color: 'white' }\n   * // Simply styles.listItem would return its ID (number)\n   * ```\n   * This method internally uses `StyleSheetRegistry.getStyleByID(style)`\n   * to resolve style objects represented by IDs. Thus, an array of style\n   * objects (instances of StyleSheet.create), are individually resolved to,\n   * their respective objects, merged as one and then returned. This also explains\n   * the alternative use.\n   */\n  flatten,\n\n  /**\n   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will\n   * not be reliably announced. The whole thing might be deleted, who knows? Use\n   * at your own risk.\n   *\n   * Sets a function to use to pre-process a style property value. This is used\n   * internally to process color and transform values. You should not use this\n   * unless you really know what you are doing and have exhausted other options.\n   */\n  setStyleAttributePreprocessor(\n    property: string,\n    process: (nextProp: mixed) => mixed,\n  ) {\n    let value;\n\n    if (ReactNativeStyleAttributes[property] === true) {\n      value = {process};\n    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {\n      value = {...ReactNativeStyleAttributes[property], process};\n    } else {\n      console.error(`${property} is not a valid style attribute`);\n      return;\n    }\n\n    if (\n      __DEV__ &&\n      typeof value.process === 'function' &&\n      typeof ReactNativeStyleAttributes[property]?.process === 'function' &&\n      value.process !== ReactNativeStyleAttributes[property]?.process\n    ) {\n      console.warn(`Overwriting ${property} style attribute preprocessor`);\n    }\n\n    ReactNativeStyleAttributes[property] = value;\n  },\n\n  /**\n   * Creates a StyleSheet style reference from the given object.\n   */\n  create<+S: ____Styles_Internal>(obj: S): $ReadOnly<S> {\n    // TODO: This should return S as the return type. But first,\n    // we need to codemod all the callsites that are typing this\n    // return value as a number (even though it was opaque).\n    if (__DEV__) {\n      for (const key in obj) {\n        if (obj[key]) {\n          Object.freeze(obj[key]);\n        }\n      }\n    }\n    return obj;\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\n\n/**\n * Whether the current element is the descendant of a <Text> element.\n */\nconst TextAncestorContext = (React.createContext(\n  false,\n): React$Context<$FlowFixMe>);\nif (__DEV__) {\n  TextAncestorContext.displayName = 'TextAncestorContext';\n}\nmodule.exports = TextAncestorContext;\n","const DEV = process.env.NODE_ENV !== \"production\";\n\nconst warnings = new Set();\n\nfunction warnOnce(condition, ...rest) {\n  if (DEV && condition) {\n    const key = rest.join(\" \");\n\n    if (warnings.has(key)) {\n      return;\n    }\n\n    warnings.add(key);\n    console.warn(...rest);\n  }\n}\n\nmodule.exports = warnOnce;\n"],"names":["createNavigatorFactory","id","initialRouteName","children","screenListeners","screenOptions","rest","useNavigationBuilder","StackRouter","state","descriptors","navigation","NavigationContent","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","useState","nextDismissedKey","setNextDismissedKey","dismissedRouteName","routes","find","route","name","message","console","error","preventedRoutes","usePreventRemoveContext","preventedRouteKey","Object","keys","preventedDescriptor","isHeaderBackButtonMenuEnabledOnPreventedScreen","options","headerBackButtonMenuEnabled","preventedRouteName","View","fontFamilies","fontFamilyProcessor","ReactNativeStyleAttributes","fontFamily","process","map","headerHeight","headerBackImageSource","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerBackVisible","headerShadowVisible","headerLargeStyle","headerLargeTitle","headerLargeTitleShadowVisible","headerLargeTitleStyle","headerBackground","headerLeft","headerRight","headerShown","headerStyle","headerBlurEffect","headerTintColor","headerTitle","headerTitleAlign","headerTitleStyle","headerTransparent","headerSearchBarOptions","headerTopInsetEnabled","title","canGoBack","colors","useTheme","tintColor","Platform","OS","primary","text","headerBackTitleStyleFlattened","StyleSheet","flatten","headerLargeTitleStyleFlattened","headerTitleStyleFlattened","headerStyleFlattened","headerLargeStyleFlattened","processFonts","backTitleFontFamily","largeTitleFontFamily","titleFontFamily","titleText","getHeaderTitle","titleColor","color","titleFontSize","fontSize","titleFontWeight","fontWeight","headerTitleStyleSupported","headerLeftElement","label","headerRightElement","headerTitleElement","supportsHeaderSearchBar","isSearchBarAvailableForCurrentPlatform","SearchBar","hasHeaderSearchBar","Error","backButtonInCustomView","translucent","style","styles","background","height","ScreenStackHeaderConfig","backgroundColor","card","backTitle","backTitleFontSize","blurEffect","direction","I18nManager","getConstants","isRTL","disableBackButtonMenu","hidden","hideBackButton","hideShadow","largeTitle","largeTitleBackgroundColor","largeTitleColor","largeTitleFontSize","largeTitleFontWeight","largeTitleHideShadow","topInsetEnabled","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","row","HeaderTitle","undefined","ScreenStackHeaderBackButtonImage","source","ScreenStackHeaderRightView","ScreenStackHeaderSearchBarView","create","flexDirection","alignItems","position","top","left","right","zIndex","overflow","props","SafeAreaProviderCompat","NativeStackViewInner","isAndroid","MaybeNestedStack","presentation","header","contentStyle","isHeaderInModal","headerShownPreviousRef","useRef","warnOnce","current","content","container","stackPresentation","ScreenStack","Screen","enabled","absoluteFill","SceneView","descriptor","previousDescriptor","nextDescriptor","onWillDisappear","onAppear","onDisappear","onDismissed","onHeaderBackButtonClicked","onNativeDismissCancelled","render","animationDuration","animationTypeForReplace","gestureEnabled","autoHideHomeIndicator","navigationBarColor","navigationBarHidden","orientation","statusBarAnimation","statusBarHidden","statusBarStyle","statusBarTranslucent","statusBarColor","freezeOnBlur","animation","customAnimationOnGesture","fullScreenGestureEnabled","gestureDirection","nextGestureDirection","gestureDirectionOverride","insets","useSafeAreaInsets","frame","useSafeAreaFrame","isModal","isIPhone","isPad","isTVOS","isLandscape","width","isParentHeaderShown","useContext","HeaderShownContext","parentHeaderHeight","HeaderHeightContext","parentHeaderBack","HeaderBackContext","topInset","defaultHeaderHeight","getDefaultHeaderHeight","customHeaderHeight","setCustomHeaderHeight","headerBack","isRemovePrevented","preventRemove","customAnimationOnSwipe","fullScreenSwipeEnabled","homeIndicatorHidden","replaceAnimation","stackAnimation","screenOrientation","swipeDirection","transitionDuration","isNativeStack","nativeBackButtonDismissalEnabled","preventNativeDismiss","NavigationContext","Provider","value","NavigationRouteContext","scene","onLayout","nativeEvent","layout","absolute","back","useDismissedRouteError","useInvalidPreventRemoveError","previousKey","nextKey","emit","type","data","closing","event","pop","dismissCount","flex","freeze","placeholder","Suspense","fallback","Suspender","promiseCache","promise","Promise","resolve","Fragment","createContext","isPlatformSupported","ENABLE_SCREENS","ENABLE_FREEZE","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","requireNativeComponent","NativeScreenContainer","NativeScreenNavigationContainer","this","DelayedFreeze","freezeState","setFreezeState","setImmediate","Freeze","InnerScreen","ref","Animated","Value","progress","goingForward","setRef","onComponentRef","setNativeProps","createAnimatedComponent","active","activityState","gestureResponseDistance","warn","start","end","bottom","viewConfig","validAttributes","display","onTransitionProgress","useNativeDriver","Component","headerSubview","justifyContent","ScreenContext","ScreenWrapper","context","contextType","module","exports","ScreenContainer","hasTwoStates","size","Children","count","childrenWithFreeze","child","freezeEnabled","ScreenStackHeaderSubview","FullWindowOverlay","Image","resizeMode","fadeDuration","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","screensEnabled","shouldUseActivityState","useTransitionProgress","executeNativeBackPress","TransitionProgressContext","BackHandler","exitApp","includes","forwardRef","forwardedRef","displayName","__INTERNAL_VIEW_CONFIG","uiViewClassName","removeClippedSubviews","accessible","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderTopStartRadius","borderTopEndRadius","borderBottomStartRadius","borderBottomEndRadius","borderStyle","hitSlop","pointerEvents","nativeBackgroundAndroid","nativeForegroundAndroid","needsOffscreenAlphaCompositing","borderWidth","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","borderStartWidth","borderEndWidth","borderColor","require","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","borderStartColor","borderEndColor","focusable","backfaceVisibility","ViewNativeComponent","NativeComponentRegistry","get","Commands","codegenNativeCommands","supportedCommands","AppContainer","inspector","mainKey","hasError","_subscription","remove","innerView","collapsable","appContainer","_mainRef","Wrapper","WrapperComponent","initialProps","fabric","showArchitectureIndicator","RootTagContext","createRootTag","rootTag","getDerivedStateFromError","PixelRatio","hairlineWidth","roundToNearestPixel","absoluteFillObject","compose","style1","style2","setStyleAttributePreprocessor","property","obj","TextAncestorContext","Set","condition"],"sourceRoot":""}