{"version":3,"file":"vendors-node_modules_react-navigation_native_src_index_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-navigation/core/src/BaseNavigationContainer.tsx","webpack:///./node_modules/@react-navigation/core/src/CurrentRenderContext.tsx","webpack:///./node_modules/@react-navigation/core/src/EnsureSingleNavigator.tsx","webpack:///./node_modules/@react-navigation/core/src/Group.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationBuilderContext.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationContainerRefContext.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationContext.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationHelpersContext.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationRouteContext.tsx","webpack:///./node_modules/@react-navigation/core/src/NavigationStateContext.tsx","webpack:///./node_modules/@react-navigation/core/src/PreventRemoveContext.tsx","webpack:///./node_modules/@react-navigation/core/src/PreventRemoveProvider.tsx","webpack:///./node_modules/@react-navigation/core/src/SceneView.tsx","webpack:///./node_modules/@react-navigation/core/src/Screen.tsx","webpack:///./node_modules/@react-navigation/core/src/StaticContainer.tsx","webpack:///./node_modules/@react-navigation/core/src/UnhandledActionContext.tsx","webpack:///./node_modules/@react-navigation/core/src/checkDuplicateRouteNames.tsx","webpack:///./node_modules/@react-navigation/core/src/checkSerializable.tsx","webpack:///./node_modules/@react-navigation/core/src/createNavigationContainerRef.tsx","webpack:///./node_modules/@react-navigation/core/src/createNavigatorFactory.tsx","webpack:///./node_modules/@react-navigation/core/src/findFocusedRoute.tsx","webpack:///./node_modules/@react-navigation/core/src/fromEntries.tsx","webpack:///./node_modules/@react-navigation/core/src/getActionFromState.tsx","webpack:///./node_modules/@react-navigation/core/src/getFocusedRouteNameFromRoute.tsx","webpack:///./node_modules/@react-navigation/core/src/getPathFromState.tsx","webpack:///./node_modules/@react-navigation/core/src/getStateFromPath.tsx","webpack:///./node_modules/@react-navigation/core/src/index.tsx","webpack:///./node_modules/@react-navigation/core/src/isArrayEqual.tsx","webpack:///./node_modules/@react-navigation/core/src/isRecordEqual.tsx","webpack:///./node_modules/@react-navigation/core/src/types.tsx","webpack:///./node_modules/@react-navigation/core/src/useChildListeners.tsx","webpack:///./node_modules/@react-navigation/core/src/useComponent.tsx","webpack:///./node_modules/@react-navigation/core/src/useCurrentRender.tsx","webpack:///./node_modules/@react-navigation/core/src/useDescriptors.tsx","webpack:///./node_modules/@react-navigation/core/src/useEventEmitter.tsx","webpack:///./node_modules/@react-navigation/core/src/useFocusEffect.tsx","webpack:///./node_modules/@react-navigation/core/src/useFocusEvents.tsx","webpack:///./node_modules/@react-navigation/core/src/useFocusedListenersChildrenAdapter.tsx","webpack:///./node_modules/@react-navigation/core/src/useIsFocused.tsx","webpack:///./node_modules/@react-navigation/core/src/useKeyedChildListeners.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigation.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigationBuilder.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigationCache.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigationContainerRef.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigationHelpers.tsx","webpack:///./node_modules/@react-navigation/core/src/useNavigationState.tsx","webpack:///./node_modules/@react-navigation/core/src/useOnAction.tsx","webpack:///./node_modules/@react-navigation/core/src/useOnGetState.tsx","webpack:///./node_modules/@react-navigation/core/src/useOnPreventRemove.tsx","webpack:///./node_modules/@react-navigation/core/src/useOnRouteFocus.tsx","webpack:///./node_modules/@react-navigation/core/src/useOptionsGetters.tsx","webpack:///./node_modules/@react-navigation/core/src/usePreventRemove.tsx","webpack:///./node_modules/@react-navigation/core/src/usePreventRemoveContext.tsx","webpack:///./node_modules/@react-navigation/core/src/useRegisterNavigator.tsx","webpack:///./node_modules/@react-navigation/core/src/useRoute.tsx","webpack:///./node_modules/@react-navigation/core/src/useRouteCache.tsx","webpack:///./node_modules/@react-navigation/core/src/useScheduleUpdate.tsx","webpack:///./node_modules/@react-navigation/core/src/useSyncState.tsx","webpack:///./node_modules/@react-navigation/core/src/validatePathConfig.tsx","webpack:///./node_modules/@react-navigation/native/src/Link.tsx","webpack:///./node_modules/@react-navigation/native/src/LinkingContext.tsx","webpack:///./node_modules/@react-navigation/native/src/NavigationContainer.tsx","webpack:///./node_modules/@react-navigation/native/src/ServerContainer.tsx","webpack:///./node_modules/@react-navigation/native/src/ServerContext.tsx","webpack:///./node_modules/@react-navigation/native/src/extractPathFromURL.tsx","webpack:///./node_modules/@react-navigation/native/src/index.tsx","webpack:///./node_modules/@react-navigation/native/src/theming/DarkTheme.tsx","webpack:///./node_modules/@react-navigation/native/src/theming/DefaultTheme.tsx","webpack:///./node_modules/@react-navigation/native/src/theming/ThemeContext.tsx","webpack:///./node_modules/@react-navigation/native/src/theming/ThemeProvider.tsx","webpack:///./node_modules/@react-navigation/native/src/theming/useTheme.tsx","webpack:///./node_modules/@react-navigation/native/src/useBackButton.tsx","webpack:///./node_modules/@react-navigation/native/src/useDocumentTitle.native.tsx","webpack:///./node_modules/@react-navigation/native/src/useLinkBuilder.tsx","webpack:///./node_modules/@react-navigation/native/src/useLinkProps.tsx","webpack:///./node_modules/@react-navigation/native/src/useLinkTo.tsx","webpack:///./node_modules/@react-navigation/native/src/useLinking.native.tsx","webpack:///./node_modules/@react-navigation/native/src/useScrollToTop.tsx","webpack:///./node_modules/@react-navigation/native/src/useThenable.tsx","webpack:///./node_modules/@react-navigation/routers/src/BaseRouter.tsx","webpack:///./node_modules/@react-navigation/routers/src/CommonActions.tsx","webpack:///./node_modules/@react-navigation/routers/src/DrawerRouter.tsx","webpack:///./node_modules/@react-navigation/routers/src/StackRouter.tsx","webpack:///./node_modules/@react-navigation/routers/src/TabRouter.tsx","webpack:///./node_modules/@react-navigation/routers/src/index.tsx","webpack:///./node_modules/react-is/cjs/react-is.production.min.js","webpack:///./node_modules/react-is/index.js","webpack:///./node_modules/decode-uri-component/index.js","webpack:///./node_modules/escape-string-regexp/index.js","webpack:///./node_modules/filter-obj/index.js","webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/split-on-first/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./node_modules/use-latest-callback/lib/index.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/objectWithoutProperties.js","webpack:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack:///./node_modules/nanoid/non-secure/index.cjs"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n","import * as React from 'react';\n\n/**\n * Context which holds the values for the current navigation tree.\n * Intended for use in SSR. This is not safe to use on the client.\n */\nconst CurrentRenderContext = React.createContext<\n  { options?: object } | undefined\n>(undefined);\n\nexport default CurrentRenderContext;\n","import * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MULTIPLE_NAVIGATOR_ERROR = `Another navigator is already registered for this container. You likely have multiple navigators under a single \"NavigationContainer\" or \"Screen\". Make sure each navigator is under a separate \"Screen\" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.`;\n\nexport const SingleNavigatorContext = React.createContext<\n  | {\n      register(key: string): void;\n      unregister(key: string): void;\n    }\n  | undefined\n>(undefined);\n\n/**\n * Component which ensures that there's only one navigator nested under it.\n */\nexport default function EnsureSingleNavigator({ children }: Props) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const value = React.useMemo(\n    () => ({\n      register(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n\n        navigatorKeyRef.current = key;\n      },\n      unregister(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (key !== currentKey) {\n          return;\n        }\n\n        navigatorKeyRef.current = undefined;\n      },\n    }),\n    []\n  );\n\n  return (\n    <SingleNavigatorContext.Provider value={value}>\n      {children}\n    </SingleNavigatorContext.Provider>\n  );\n}\n","import type { ParamListBase } from '@react-navigation/routers';\n\nimport type { RouteGroupConfig } from './types';\n\n/**\n * Empty component used for grouping screen configs.\n */\nexport default function Group<\n  ParamList extends ParamListBase,\n  ScreenOptions extends {}\n>(_: RouteGroupConfig<ParamList, ScreenOptions>) {\n  /* istanbul ignore next */\n  return null;\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationHelpers } from './types';\n\nexport type ListenerMap = {\n  action: ChildActionListener;\n  focus: FocusedNavigationListener;\n};\n\nexport type KeyedListenerMap = {\n  getState: GetStateListener;\n  beforeRemove: ChildBeforeRemoveListener;\n};\n\nexport type AddListener = <T extends keyof ListenerMap>(\n  type: T,\n  listener: ListenerMap[T]\n) => void;\n\nexport type AddKeyedListener = <T extends keyof KeyedListenerMap>(\n  type: T,\n  key: string,\n  listener: KeyedListenerMap[T]\n) => void;\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => {\n  handled: boolean;\n  result: T;\n};\n\nexport type GetStateListener = () => NavigationState;\n\nexport type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nconst NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addListener?: AddListener;\n  addKeyedListener?: AddKeyedListener;\n  onRouteFocus?: (key: string) => void;\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\n  onOptionsChange: (options: object) => void;\n  stackRef?: React.MutableRefObject<string | undefined>;\n}>({\n  onDispatchAction: () => undefined,\n  onOptionsChange: () => undefined,\n});\n\nexport default NavigationBuilderContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationContainerRef } from './types';\n\n/**\n * Context which holds the route prop for a screen.\n */\nconst NavigationContainerRefContext = React.createContext<\n  NavigationContainerRef<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationContainerRefContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\n\n/**\n * Context which holds the navigation prop for a screen.\n */\nconst NavigationContext = React.createContext<\n  NavigationProp<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationHelpers } from './types';\n\n/**\n * Context which holds the navigation helpers of the parent navigator.\n * Navigators should use this context in their view component.\n */\nconst NavigationHelpersContext = React.createContext<\n  NavigationHelpers<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationHelpersContext;\n","import type { Route } from '@react-navigation/routers';\nimport * as React from 'react';\n\n/**\n * Context which holds the route prop for a screen.\n */\nconst NavigationRouteContext = React.createContext<Route<string> | undefined>(\n  undefined\n);\n\nexport default NavigationRouteContext;\n","import type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR =\n  \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started for setup instructions.\";\n\nexport default React.createContext<{\n  isDefault?: true;\n  state?: NavigationState | PartialState<NavigationState>;\n  getKey: () => string | undefined;\n  setKey: (key: string) => void;\n  getState: () => NavigationState | PartialState<NavigationState> | undefined;\n  setState: (\n    state: NavigationState | PartialState<NavigationState> | undefined\n  ) => void;\n  getIsInitial: () => boolean;\n  addOptionsGetter?: (\n    key: string,\n    getter: () => object | undefined | null\n  ) => void;\n}>({\n  isDefault: true,\n\n  get getKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getIsInitial(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n","import * as React from 'react';\n\n/**\n * A type of an object that have a route key as an object key\n * and a value whether to prevent that route.\n */\nexport type PreventedRoutes = Record<string, { preventRemove: boolean }>;\n\nconst PreventRemoveContext = React.createContext<\n  | {\n      preventedRoutes: PreventedRoutes;\n      setPreventRemove: (\n        id: string,\n        routeKey: string,\n        preventRemove: boolean\n      ) => void;\n    }\n  | undefined\n>(undefined);\n\nexport default PreventRemoveContext;\n","import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n","import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\n\nimport type { EventMapBase, RouteConfig } from './types';\n\n/**\n * Empty component used for specifying route configuration.\n */\nexport default function Screen<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(_: RouteConfig<ParamList, RouteName, State, ScreenOptions, EventMap>) {\n  /* istanbul ignore next */\n  return null;\n}\n","import * as React from 'react';\n\n/**\n * Component which prevents updates for children if no props changed\n */\nfunction StaticContainer(props: any) {\n  return props.children;\n}\n\nexport default React.memo(StaticContainer, (prevProps: any, nextProps: any) => {\n  const prevPropKeys = Object.keys(prevProps);\n  const nextPropKeys = Object.keys(nextProps);\n\n  if (prevPropKeys.length !== nextPropKeys.length) {\n    return false;\n  }\n\n  for (const key of prevPropKeys) {\n    if (key === 'children') {\n      continue;\n    }\n\n    if (prevProps[key] !== nextProps[key]) {\n      return false;\n    }\n  }\n\n  return true;\n});\n","import type { NavigationAction } from '@react-navigation/routers';\nimport * as React from 'react';\n\nconst UnhandledActionContext = React.createContext<\n  ((action: NavigationAction) => void) | undefined\n>(undefined);\n\nexport default UnhandledActionContext;\n","import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n","const checkSerializableWithoutCircularReference = (\n  o: { [key: string]: any },\n  seen: Set<any>,\n  location: (string | number)[]\n):\n  | { serializable: true }\n  | {\n      serializable: false;\n      location: (string | number)[];\n      reason: string;\n    } => {\n  if (\n    o === undefined ||\n    o === null ||\n    typeof o === 'boolean' ||\n    typeof o === 'number' ||\n    typeof o === 'string'\n  ) {\n    return { serializable: true };\n  }\n\n  if (\n    Object.prototype.toString.call(o) !== '[object Object]' &&\n    !Array.isArray(o)\n  ) {\n    return {\n      serializable: false,\n      location,\n      reason: typeof o === 'function' ? 'Function' : String(o),\n    };\n  }\n\n  if (seen.has(o)) {\n    return {\n      serializable: false,\n      reason: 'Circular reference',\n      location,\n    };\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (let i = 0; i < o.length; i++) {\n      const childResult = checkSerializableWithoutCircularReference(\n        o[i],\n        new Set<any>(seen),\n        [...location, i]\n      );\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  } else {\n    for (const key in o) {\n      const childResult = checkSerializableWithoutCircularReference(\n        o[key],\n        new Set<any>(seen),\n        [...location, key]\n      );\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  }\n\n  return { serializable: true };\n};\n\nexport default function checkSerializable(o: { [key: string]: any }) {\n  return checkSerializableWithoutCircularReference(o, new Set<any>(), []);\n}\n","import { CommonActions } from '@react-navigation/routers';\n\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerRefWithCurrent,\n} from './types';\n\nexport const NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport default function createNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const methods = [\n    ...Object.keys(CommonActions),\n    'addListener',\n    'removeListener',\n    'resetRoot',\n    'dispatch',\n    'isFocused',\n    'canGoBack',\n    'getRootState',\n    'getState',\n    'getParent',\n    'getCurrentRoute',\n    'getCurrentOptions',\n  ] as const;\n\n  const listeners: Record<string, ((...args: any[]) => void)[]> = {};\n\n  const removeListener = (\n    event: string,\n    callback: (...args: any[]) => void\n  ) => {\n    if (listeners[event]) {\n      listeners[event] = listeners[event].filter((cb) => cb !== callback);\n    }\n  };\n\n  let current: NavigationContainerRef<ParamList> | null = null;\n\n  const ref: NavigationContainerRefWithCurrent<ParamList> = {\n    get current() {\n      return current;\n    },\n    set current(value: NavigationContainerRef<ParamList> | null) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach((callback) => {\n            value.addListener(\n              event as keyof NavigationContainerEventMap,\n              callback\n            );\n          });\n        });\n      }\n    },\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce<any>((acc, name) => {\n      acc[name] = (...args: any[]) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener': {\n              const [event, callback] = args;\n\n              listeners[event] = listeners[event] || [];\n              listeners[event].push(callback);\n\n              return () => removeListener(event, callback);\n            }\n            case 'removeListener': {\n              const [event, callback] = args;\n\n              removeListener(event, callback);\n              break;\n            }\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n      return acc;\n    }, {}),\n  };\n\n  return ref;\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport type * as React from 'react';\n\nimport Group from './Group';\nimport Screen from './Screen';\nimport type { EventMapBase, TypedNavigator } from './types';\n\n/**\n * Higher order component to create a `Navigator` and `Screen` pair.\n * Custom navigators should wrap the navigator component in `createNavigator` before exporting.\n *\n * @param Navigator The navigtor component to wrap.\n * @returns Factory method to create a `Navigator` and `Screen` pair.\n */\nexport default function createNavigatorFactory<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n  NavigatorComponent extends React.ComponentType<any>\n>(Navigator: NavigatorComponent) {\n  return function <ParamList extends ParamListBase>(): TypedNavigator<\n    ParamList,\n    State,\n    ScreenOptions,\n    EventMap,\n    typeof Navigator\n  > {\n    if (arguments[0] !== undefined) {\n      throw new Error(\n        \"Creating a navigator doesn't take an argument. Maybe you are trying to use React Navigation 4 API? See https://reactnavigation.org/docs/hello-react-navigation for the latest API and guides.\"\n      );\n    }\n\n    return {\n      Navigator,\n      Group,\n      Screen,\n    };\n  };\n}\n","import type { InitialState } from '@react-navigation/routers';\n\nexport default function findFocusedRoute(state: InitialState) {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index ?? 0].state != null) {\n    current = current.routes[current.index ?? 0].state;\n  }\n\n  const route = current?.routes[current?.index ?? 0];\n\n  return route;\n}\n","// Object.fromEntries is not available in older iOS versions\nexport default function fromEntries<K extends string, V>(\n  entries: (readonly [K, V])[]\n) {\n  return entries.reduce((acc, [k, v]) => {\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(`A value for key '${k}' already exists in the object.`);\n    }\n\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n}\n","import type {\n  CommonActions,\n  NavigationState,\n  ParamListBase,\n  PartialRoute,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\n\nimport type { NavigatorScreenParams, PathConfig, PathConfigMap } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap<object>;\n};\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NavigatorScreenParams<State>;\n    path?: string;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options\n    ? createNormalizedConfigItem(options as PathConfig<object> | string)\n    : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      (routes.length === 1 && routes[0].key === undefined) ||\n      (routes.length === 2 &&\n        routes[0].key === undefined &&\n        routes[0].name === normalizedConfig?.initialRouteName &&\n        routes[1].key === undefined)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params = { ...route.params } as NavigatorScreenParams<\n    ParamListBase,\n    NavigationState\n  >;\n\n  let payload = route\n    ? { name: route.name, path: route.path, params }\n    : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    // Explicitly set to override existing value when merging params\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined,\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName &&\n      routes[1].key === undefined\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params as NavigatorScreenParams<\n        ParamListBase,\n        NavigationState\n      >;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig<object> | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap<object>) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n","import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n","import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n","import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n","export { default as BaseNavigationContainer } from './BaseNavigationContainer';\nexport { default as createNavigationContainerRef } from './createNavigationContainerRef';\nexport { default as createNavigatorFactory } from './createNavigatorFactory';\nexport { default as CurrentRenderContext } from './CurrentRenderContext';\nexport { default as findFocusedRoute } from './findFocusedRoute';\nexport { default as getActionFromState } from './getActionFromState';\nexport { default as getFocusedRouteNameFromRoute } from './getFocusedRouteNameFromRoute';\nexport { default as getPathFromState } from './getPathFromState';\nexport { default as getStateFromPath } from './getStateFromPath';\nexport { default as NavigationContainerRefContext } from './NavigationContainerRefContext';\nexport { default as NavigationContext } from './NavigationContext';\nexport { default as NavigationHelpersContext } from './NavigationHelpersContext';\nexport { default as NavigationRouteContext } from './NavigationRouteContext';\nexport { default as PreventRemoveContext } from './PreventRemoveContext';\nexport { default as PreventRemoveProvider } from './PreventRemoveProvider';\nexport * from './types';\nexport { default as useFocusEffect } from './useFocusEffect';\nexport { default as useIsFocused } from './useIsFocused';\nexport { default as useNavigation } from './useNavigation';\nexport { default as useNavigationBuilder } from './useNavigationBuilder';\nexport { default as useNavigationContainerRef } from './useNavigationContainerRef';\nexport { default as useNavigationState } from './useNavigationState';\nexport { default as UNSTABLE_usePreventRemove } from './usePreventRemove';\nexport { default as usePreventRemoveContext } from './usePreventRemoveContext';\nexport { default as useRoute } from './useRoute';\nexport { default as validatePathConfig } from './validatePathConfig';\nexport * from '@react-navigation/routers';\n","/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nexport default function isArrayEqual(a: any[], b: any[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return a.every((it, index) => it === b[index]);\n}\n","/**\n * Compare two records with primitive values as the content.\n */\nexport default function isRecordEqual(\n  a: Record<string, any>,\n  b: Record<string, any>\n) {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every((key) => a[key] === b[key]);\n}\n","import type {\n  DefaultRouterOptions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport type * as React from 'react';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace ReactNavigation {\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface RootParamList {}\n  }\n}\n\ntype Keyof<T extends {}> = Extract<keyof T, string>;\n\nexport type DefaultNavigatorOptions<\n  ParamList extends ParamListBase,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = DefaultRouterOptions<Keyof<ParamList>> & {\n  /**\n   * Optional ID for the navigator. Can be used with `navigation.getParent(id)` to refer to a parent.\n   */\n  id?: string;\n  /**\n   * Children React Elements to extract the route configuration from.\n   * Only `Screen`, `Group` and `React.Fragment` are supported as children.\n   */\n  children: React.ReactNode;\n  /**\n   * Event listeners for all the screens in the navigator.\n   */\n  screenListeners?:\n    | ScreenListeners<State, EventMap>\n    | ((props: {\n        route: RouteProp<ParamList>;\n        navigation: any;\n      }) => ScreenListeners<State, EventMap>);\n  /**\n   * Default options for all screens under this navigator.\n   */\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList>;\n        navigation: any;\n      }) => ScreenOptions);\n  /**\n   * Default options specified by the navigator.\n   * It receives the custom options in the arguments if a function is specified.\n   */\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n};\n\nexport type EventMapBase = Record<\n  string,\n  { data?: any; canPreventDefault?: boolean }\n>;\n\nexport type EventMapCore<State extends NavigationState> = {\n  focus: { data: undefined };\n  blur: { data: undefined };\n  state: { data: { state: State } };\n  beforeRemove: { data: { action: NavigationAction }; canPreventDefault: true };\n};\n\nexport type EventArg<\n  EventName extends string,\n  CanPreventDefault extends boolean | undefined = false,\n  Data = undefined\n> = {\n  /**\n   * Type of the event (e.g. `focus`, `blur`)\n   */\n  readonly type: EventName;\n  readonly target?: string;\n} & (CanPreventDefault extends true\n  ? {\n      /**\n       * Whether `event.preventDefault()` was called on this event object.\n       */\n      readonly defaultPrevented: boolean;\n      /**\n       * Prevent the default action which happens on this event.\n       */\n      preventDefault(): void;\n    }\n  : {}) &\n  (undefined extends Data\n    ? { readonly data?: Readonly<Data> }\n    : { readonly data: Readonly<Data> });\n\nexport type EventListenerCallback<\n  EventMap extends EventMapBase,\n  EventName extends keyof EventMap\n> = (\n  e: EventArg<\n    Extract<EventName, string>,\n    EventMap[EventName]['canPreventDefault'],\n    EventMap[EventName]['data']\n  >\n) => void;\n\nexport type EventConsumer<EventMap extends EventMapBase> = {\n  /**\n   * Subscribe to events from the parent navigator.\n   *\n   * @param type Type of the event (e.g. `focus`, `blur`)\n   * @param callback Callback listener which is executed upon receiving the event.\n   */\n  addListener<EventName extends Keyof<EventMap>>(\n    type: EventName,\n    callback: EventListenerCallback<EventMap, EventName>\n  ): () => void;\n  removeListener<EventName extends Keyof<EventMap>>(\n    type: EventName,\n    callback: EventListenerCallback<EventMap, EventName>\n  ): void;\n};\n\nexport type EventEmitter<EventMap extends EventMapBase> = {\n  /**\n   * Emit an event to child screens.\n   *\n   * @param options.type Type of the event (e.g. `focus`, `blur`)\n   * @param [options.data] Optional information regarding the event.\n   * @param [options.target] Key of the target route which should receive the event.\n   * If not specified, all routes receive the event.\n   */\n  emit<EventName extends Keyof<EventMap>>(\n    options: {\n      type: EventName;\n      target?: string;\n    } & (EventMap[EventName]['canPreventDefault'] extends true\n      ? { canPreventDefault: true }\n      : {}) &\n      (undefined extends EventMap[EventName]['data']\n        ? { data?: EventMap[EventName]['data'] }\n        : { data: EventMap[EventName]['data'] })\n  ): EventArg<\n    EventName,\n    EventMap[EventName]['canPreventDefault'],\n    EventMap[EventName]['data']\n  >;\n};\n\nexport class PrivateValueStore<T extends [any, any, any]> {\n  /**\n   * UGLY HACK! DO NOT USE THE TYPE!!!\n   *\n   * TypeScript requires a type to be used to be able to infer it.\n   * The type should exist as its own without any operations such as union.\n   * So we need to figure out a way to store this type in a property.\n   * The problem with a normal property is that it shows up in intelliSense.\n   * Adding private keyword works, but the annotation is stripped away in declaration.\n   * Turns out if we use an empty string, it doesn't show up in intelliSense.\n   */\n  protected ''?: T;\n}\n\ntype NavigationHelpersCommon<\n  ParamList extends ParamListBase,\n  State extends NavigationState = NavigationState\n> = {\n  /**\n   * Dispatch an action or an update function to the router.\n   * The update function will receive the current state,\n   *\n   * @param action Action object or update function.\n   */\n  dispatch(\n    action: NavigationAction | ((state: State) => NavigationAction)\n  ): void;\n\n  /**\n   * Navigate to a route in current navigation tree.\n   *\n   * @param name Name of the route to navigate to.\n   * @param [params] Params object for the route.\n   */\n  navigate<RouteName extends keyof ParamList>(\n    ...args: // this first condition allows us to iterate over a union type\n    // This is to avoid getting a union of all the params from `ParamList[RouteName]`,\n    // which will get our types all mixed up if a union RouteName is passed in.\n    RouteName extends unknown\n      ? // This condition checks if the params are optional,\n        // which means it's either undefined or a union with undefined\n        undefined extends ParamList[RouteName]\n        ?\n            | [screen: RouteName] // if the params are optional, we don't have to provide it\n            | [screen: RouteName, params: ParamList[RouteName]]\n        : [screen: RouteName, params: ParamList[RouteName]]\n      : never\n  ): void;\n\n  /**\n   * Navigate to a route in current navigation tree.\n   *\n   * @param route Object with `key` or `name` for the route to navigate to, and a `params` object.\n   */\n  navigate<RouteName extends keyof ParamList>(\n    options: RouteName extends unknown\n      ?\n          | { key: string; params?: ParamList[RouteName]; merge?: boolean }\n          | {\n              name: RouteName;\n              key?: string;\n              params: ParamList[RouteName];\n              merge?: boolean;\n            }\n      : never\n  ): void;\n\n  /**\n   * Reset the navigation state to the provided state.\n   *\n   * @param state Navigation state object.\n   */\n  reset(state: PartialState<State> | State): void;\n\n  /**\n   * Go back to the previous route in history.\n   */\n  goBack(): void;\n\n  /**\n   * Check if the screen is focused. The method returns `true` if focused, `false` otherwise.\n   * Note that this method doesn't re-render screen when the focus changes. So don't use it in `render`.\n   * To get notified of focus changes, use `addListener('focus', cb)` and `addListener('blur', cb)`.\n   * To conditionally render content based on focus state, use the `useIsFocused` hook.\n   */\n  isFocused(): boolean;\n\n  /**\n   * Check if dispatching back action will be handled by navigation.\n   * Note that this method doesn't re-render screen when the result changes. So don't use it in `render`.\n   */\n  canGoBack(): boolean;\n\n  /**\n   * Returns the name of the navigator specified in the `name` prop.\n   * If no name is specified, returns `undefined`.\n   */\n  getId(): string | undefined;\n\n  /**\n   * Returns the navigation helpers from a parent navigator based on the ID.\n   * If an ID is provided, the navigation helper from the parent navigator with matching ID (including current) will be returned.\n   * If no ID is provided, the navigation helper from the immediate parent navigator will be returned.\n   *\n   * @param id Optional ID of a parent navigator.\n   */\n  getParent<T = NavigationHelpers<ParamListBase> | undefined>(id?: string): T;\n\n  /**\n   * Returns the navigator's state.\n   * Note that this method doesn't re-render screen when the result changes. So don't use it in `render`.\n   */\n  getState(): State;\n} & PrivateValueStore<[ParamList, unknown, unknown]>;\n\nexport type NavigationHelpers<\n  ParamList extends ParamListBase,\n  EventMap extends EventMapBase = {}\n> = NavigationHelpersCommon<ParamList> &\n  EventEmitter<EventMap> & {\n    /**\n     * Update the param object for the route.\n     * The new params will be shallow merged with the old one.\n     *\n     * @param params Params object for the current route.\n     */\n    setParams<RouteName extends keyof ParamList>(\n      params: Partial<ParamList[RouteName]>\n    ): void;\n  };\n\nexport type NavigationContainerProps = {\n  /**\n   * Initial navigation state for the child navigators.\n   */\n  initialState?: InitialState;\n  /**\n   * Callback which is called with the latest navigation state when it changes.\n   */\n  onStateChange?: (state: NavigationState | undefined) => void;\n  /**\n   * Callback which is called when an action is not handled.\n   */\n  onUnhandledAction?: (action: NavigationAction) => void;\n  /**\n   * Whether this navigation container should be independent of parent containers.\n   * If this is not set to `true`, this container cannot be nested inside another container.\n   * Setting it to `true` disconnects any children navigators from parent container.\n   */\n  independent?: boolean;\n  /**\n   * Children elements to render.\n   */\n  children: React.ReactNode;\n};\n\nexport type NavigationProp<\n  ParamList extends {},\n  RouteName extends keyof ParamList = Keyof<ParamList>,\n  NavigatorID extends string | undefined = undefined,\n  State extends NavigationState = NavigationState<ParamList>,\n  ScreenOptions extends {} = {},\n  EventMap extends EventMapBase = {}\n> = Omit<NavigationHelpersCommon<ParamList, State>, 'getParent'> & {\n  /**\n   * Returns the navigation prop from a parent navigator based on the ID.\n   * If an ID is provided, the navigation prop from the parent navigator with matching ID (including current) will be returned.\n   * If no ID is provided, the navigation prop from the immediate parent navigator will be returned.\n   *\n   * @param id Optional ID of a parent navigator.\n   */\n  getParent<T = NavigationProp<ParamListBase> | undefined>(id?: NavigatorID): T;\n\n  /**\n   * Update the param object for the route.\n   * The new params will be shallow merged with the old one.\n   *\n   * @param params Params object for the current route.\n   */\n  setParams(\n    params: ParamList[RouteName] extends undefined\n      ? undefined\n      : Partial<ParamList[RouteName]>\n  ): void;\n\n  /**\n   * Update the options for the route.\n   * The options object will be shallow merged with default options object.\n   *\n   * @param options Options object for the route.\n   */\n  setOptions(options: Partial<ScreenOptions>): void;\n} & EventConsumer<EventMap & EventMapCore<State>> &\n  PrivateValueStore<[ParamList, RouteName, EventMap]>;\n\nexport type RouteProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = Keyof<ParamList>\n> = Route<Extract<RouteName, string>, ParamList[RouteName]>;\n\nexport type CompositeNavigationProp<\n  A extends NavigationProp<ParamListBase, string, any, any, any>,\n  B extends NavigationHelpersCommon<ParamListBase, any>\n> = Omit<A & B, keyof NavigationProp<any>> &\n  NavigationProp<\n    /**\n     * Param list from both navigation objects needs to be combined\n     * For example, we should be able to navigate to screens in both A and B\n     */\n    (A extends NavigationHelpersCommon<infer T> ? T : never) &\n      (B extends NavigationHelpersCommon<infer U> ? U : never),\n    /**\n     * The route name should refer to the route name specified in the first type\n     * Ideally it should work for any of them, but it's not possible to infer that way\n     */\n    A extends NavigationProp<any, infer R> ? R : string,\n    /**\n     * ID from both navigation objects needs to be combined for `getParent`\n     */\n    | (A extends NavigationProp<any, any, infer I> ? I : never)\n    | (B extends NavigationProp<any, any, infer J> ? J : never),\n    /**\n     * The type of state should refer to the state specified in the first type\n     */\n    A extends NavigationProp<any, any, any, infer S> ? S : NavigationState,\n    /**\n     * Screen options from both navigation objects needs to be combined\n     * This allows typechecking `setOptions`\n     */\n    (A extends NavigationProp<any, any, any, any, infer O> ? O : {}) &\n      (B extends NavigationProp<any, any, any, any, infer P> ? P : {}),\n    /**\n     * Event consumer config should refer to the config specified in the first type\n     * This allows typechecking `addListener`/`removeListener`\n     */\n    A extends NavigationProp<any, any, any, any, any, infer E> ? E : {}\n  >;\n\nexport type CompositeScreenProps<\n  A extends {\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      any,\n      any,\n      any\n    >;\n    route: RouteProp<ParamListBase>;\n  },\n  B extends {\n    navigation: NavigationHelpersCommon<any, any>;\n  }\n> = {\n  navigation: CompositeNavigationProp<A['navigation'], B['navigation']>;\n  route: A['route'];\n};\n\nexport type Descriptor<\n  ScreenOptions extends {},\n  Navigation extends NavigationProp<any, any, any, any, any, any>,\n  Route extends RouteProp<any, any>\n> = {\n  /**\n   * Render the component associated with this route.\n   */\n  render(): JSX.Element;\n\n  /**\n   * Options for the route.\n   */\n  options: ScreenOptions;\n\n  /**\n   * Route object for the screen\n   */\n  route: Route;\n\n  /**\n   * Navigation object for the screen\n   */\n  navigation: Navigation;\n};\n\nexport type ScreenListeners<\n  State extends NavigationState,\n  EventMap extends EventMapBase\n> = Partial<{\n  [EventName in keyof (EventMap & EventMapCore<State>)]: EventListenerCallback<\n    EventMap,\n    EventName\n  >;\n}>;\n\ntype ScreenComponentType<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> =\n  | React.ComponentType<{\n      route: RouteProp<ParamList, RouteName>;\n      navigation: any;\n    }>\n  | React.ComponentType<{}>;\n\nexport type RouteConfigComponent<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> =\n  | {\n      /**\n       * React component to render for this screen.\n       */\n      component: ScreenComponentType<ParamList, RouteName>;\n      getComponent?: never;\n      children?: never;\n    }\n  | {\n      /**\n       * Lazily get a React component to render for this screen.\n       */\n      getComponent: () => ScreenComponentType<ParamList, RouteName>;\n      component?: never;\n      children?: never;\n    }\n  | {\n      /**\n       * Render callback to render content of this screen.\n       */\n      children: (props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => React.ReactNode;\n      component?: never;\n      getComponent?: never;\n    };\n\nexport type RouteConfig<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  /**\n   * Optional key for this screen. This doesn't need to be unique.\n   * If the key changes, existing screens with this name will be removed or reset.\n   * Useful when we have some common screens and have conditional rendering.\n   */\n  navigationKey?: string;\n\n  /**\n   * Route name of this screen.\n   */\n  name: RouteName;\n\n  /**\n   * Navigator options for this screen.\n   */\n  options?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => ScreenOptions);\n\n  /**\n   * Event listeners for this screen.\n   */\n  listeners?:\n    | ScreenListeners<State, EventMap>\n    | ((props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => ScreenListeners<State, EventMap>);\n\n  /**\n   * Function to return an unique ID for this screen.\n   * Receives an object with the route params.\n   * For a given screen name, there will always be only one screen corresponding to an ID.\n   * If `undefined` is returned, it acts same as no `getId` being specified.\n   */\n  getId?: ({ params }: { params: ParamList[RouteName] }) => string | undefined;\n\n  /**\n   * Initial params object for the route.\n   */\n  initialParams?: Partial<ParamList[RouteName]>;\n} & RouteConfigComponent<ParamList, RouteName>;\n\nexport type RouteGroupConfig<\n  ParamList extends ParamListBase,\n  ScreenOptions extends {}\n> = {\n  /**\n   * Optional key for the screens in this group.\n   * If the key changes, all existing screens in this group will be removed or reset.\n   */\n  navigationKey?: string;\n\n  /**\n   * Navigator options for this screen.\n   */\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList, keyof ParamList>;\n        navigation: any;\n      }) => ScreenOptions);\n  /**\n   * Children React Elements to extract the route configuration from.\n   * Only `Screen`, `Group` and `React.Fragment` are supported as children.\n   */\n  children: React.ReactNode;\n};\n\nexport type NavigationContainerEventMap = {\n  /**\n   * Event which fires when the navigation state changes.\n   */\n  state: {\n    data: {\n      /**\n       * The updated state object after the state change.\n       */\n      state: NavigationState | PartialState<NavigationState> | undefined;\n    };\n  };\n  /**\n   * Event which fires when current options changes.\n   */\n  options: { data: { options: object } };\n  /**\n   * Event which fires when an action is dispatched.\n   * Only intended for debugging purposes, don't use it for app logic.\n   * This event will be emitted before state changes have been applied.\n   */\n  __unsafe_action__: {\n    data: {\n      /**\n       * The action object which was dispatched.\n       */\n      action: NavigationAction;\n      /**\n       * Whether the action was a no-op, i.e. resulted any state changes.\n       */\n      noop: boolean;\n      /**\n       * Stack trace of the action, this will only be available during development.\n       */\n      stack: string | undefined;\n    };\n  };\n};\n\nexport type NavigationContainerRef<ParamList extends {}> =\n  NavigationHelpers<ParamList> &\n    EventConsumer<NavigationContainerEventMap> & {\n      /**\n       * Reset the navigation state of the root navigator to the provided state.\n       *\n       * @param state Navigation state object.\n       */\n      resetRoot(state?: PartialState<NavigationState> | NavigationState): void;\n      /**\n       * Get the rehydrated navigation state of the navigation tree.\n       */\n      getRootState(): NavigationState;\n      /**\n       * Get the currently focused navigation route.\n       */\n      getCurrentRoute(): Route<string> | undefined;\n      /**\n       * Get the currently focused route's options.\n       */\n      getCurrentOptions(): object | undefined;\n      /**\n       * Whether the navigation container is ready to handle actions.\n       */\n      isReady(): boolean;\n    };\n\nexport type NavigationContainerRefWithCurrent<ParamList extends {}> =\n  NavigationContainerRef<ParamList> & {\n    current: NavigationContainerRef<ParamList> | null;\n  };\n\nexport type TypedNavigator<\n  ParamList extends ParamListBase,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n  Navigator extends React.ComponentType<any>\n> = {\n  /**\n   * Navigator component which manages the child screens.\n   */\n  Navigator: React.ComponentType<\n    Omit<\n      React.ComponentProps<Navigator>,\n      keyof DefaultNavigatorOptions<any, any, any, any>\n    > &\n      DefaultNavigatorOptions<ParamList, State, ScreenOptions, EventMap>\n  >;\n  /**\n   * Component used for grouping multiple route configuration.\n   */\n  Group: React.ComponentType<RouteGroupConfig<ParamList, ScreenOptions>>;\n  /**\n   * Component used for specifying route configuration.\n   */\n  Screen: <RouteName extends keyof ParamList>(\n    _: RouteConfig<ParamList, RouteName, State, ScreenOptions, EventMap>\n  ) => null;\n};\n\nexport type NavigatorScreenParams<\n  ParamList,\n  State extends NavigationState = NavigationState\n> =\n  | {\n      screen?: never;\n      params?: never;\n      initial?: never;\n      path?: string;\n      state: PartialState<State> | State | undefined;\n    }\n  | {\n      [RouteName in keyof ParamList]: undefined extends ParamList[RouteName]\n        ? {\n            screen: RouteName;\n            params?: ParamList[RouteName];\n            initial?: boolean;\n            path?: string;\n            state?: never;\n          }\n        : {\n            screen: RouteName;\n            params: ParamList[RouteName];\n            initial?: boolean;\n            path?: string;\n            state?: never;\n          };\n    }[keyof ParamList];\n\nexport type PathConfig<ParamList extends {}> = {\n  path?: string;\n  exact?: boolean;\n  parse?: Record<string, (value: string) => any>;\n  stringify?: Record<string, (value: any) => string>;\n  screens?: PathConfigMap<ParamList>;\n  initialRouteName?: keyof ParamList;\n};\n\nexport type PathConfigMap<ParamList extends {}> = {\n  [RouteName in keyof ParamList]?: NonNullable<\n    ParamList[RouteName]\n  > extends NavigatorScreenParams<infer T, any>\n    ? string | PathConfig<T>\n    : string | Omit<PathConfig<{}>, 'screens' | 'initialRouteName'>;\n};\n","import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n","import * as React from 'react';\n\ntype Render = (children: React.ReactNode) => JSX.Element;\n\ntype Props = {\n  render: Render;\n  children: React.ReactNode;\n};\n\nconst NavigationContent = ({ render, children }: Props) => {\n  return render(children);\n};\n\nexport default function useComponent(render: Render) {\n  const renderRef = React.useRef<Render | null>(render);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  renderRef.current = render;\n\n  React.useEffect(() => {\n    renderRef.current = null;\n  });\n\n  return React.useRef(({ children }: { children: React.ReactNode }) => {\n    const render = renderRef.current;\n\n    if (render === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    return <NavigationContent render={render}>{children}</NavigationContent>;\n  }).current;\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport CurrentRenderContext from './CurrentRenderContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  RouteProp,\n} from './types';\n\ntype Options = {\n  state: NavigationState;\n  navigation: NavigationHelpers<ParamListBase>;\n  descriptors: Record<\n    string,\n    Descriptor<object, NavigationProp<ParamListBase>, RouteProp<ParamListBase>>\n  >;\n};\n\n/**\n * Write the current options, so that server renderer can get current values\n * Mutating values like this is not safe in async mode, but it doesn't apply to SSR\n */\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors,\n}: Options) {\n  const current = React.useContext(CurrentRenderContext);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n","import * as React from 'react';\n\nimport type { EventArg, EventConsumer, EventEmitter } from './types';\n\nexport type NavigationEventEmitter<T extends Record<string, any>> =\n  EventEmitter<T> & {\n    create: (target: string) => EventConsumer<T>;\n  };\n\ntype Listeners = ((e: any) => void)[];\n\n/**\n * Hook to manage the event system used by the navigator to notify screens of various events.\n */\nexport default function useEventEmitter<T extends Record<string, any>>(\n  listen?: (e: any) => void\n): NavigationEventEmitter<T> {\n  const listenRef = React.useRef(listen);\n\n  React.useEffect(() => {\n    listenRef.current = listen;\n  });\n\n  const listeners = React.useRef<Record<string, Record<string, Listeners>>>(\n    Object.create(null)\n  );\n\n  const create = React.useCallback((target: string) => {\n    const removeListener = (type: string, callback: (data: any) => void) => {\n      const callbacks = listeners.current[type]\n        ? listeners.current[type][target]\n        : undefined;\n\n      if (!callbacks) {\n        return;\n      }\n\n      const index = callbacks.indexOf(callback);\n\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    };\n\n    const addListener = (type: string, callback: (data: any) => void) => {\n      listeners.current[type] = listeners.current[type] || {};\n      listeners.current[type][target] = listeners.current[type][target] || [];\n      listeners.current[type][target].push(callback);\n\n      let removed = false;\n      return () => {\n        // Prevent removing other listeners when unsubscribing same listener multiple times\n        if (!removed) {\n          removed = true;\n          removeListener(type, callback);\n        }\n      };\n    };\n\n    return {\n      addListener,\n      removeListener,\n    };\n  }, []);\n\n  const emit = React.useCallback(\n    ({\n      type,\n      data,\n      target,\n      canPreventDefault,\n    }: {\n      type: string;\n      data?: any;\n      target?: string;\n      canPreventDefault?: boolean;\n    }) => {\n      const items = listeners.current[type] || {};\n\n      // Copy the current list of callbacks in case they are mutated during execution\n      const callbacks =\n        target !== undefined\n          ? items[target]?.slice()\n          : ([] as Listeners)\n              .concat(...Object.keys(items).map((t) => items[t]))\n              .filter((cb, i, self) => self.lastIndexOf(cb) === i);\n\n      const event: EventArg<any, any, any> = {\n        get type() {\n          return type;\n        },\n      };\n\n      if (target !== undefined) {\n        Object.defineProperty(event, 'target', {\n          enumerable: true,\n          get() {\n            return target;\n          },\n        });\n      }\n\n      if (data !== undefined) {\n        Object.defineProperty(event, 'data', {\n          enumerable: true,\n          get() {\n            return data;\n          },\n        });\n      }\n\n      if (canPreventDefault) {\n        let defaultPrevented = false;\n\n        Object.defineProperties(event, {\n          defaultPrevented: {\n            enumerable: true,\n            get() {\n              return defaultPrevented;\n            },\n          },\n          preventDefault: {\n            enumerable: true,\n            value() {\n              defaultPrevented = true;\n            },\n          },\n        });\n      }\n\n      listenRef.current?.(event);\n\n      callbacks?.forEach((cb) => cb(event));\n\n      return event as any;\n    },\n    []\n  );\n\n  return React.useMemo(() => ({ create, emit }), [create, emit]);\n}\n","import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback(() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n","import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n","import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n","import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>(\n    Object.assign(Object.create(null), {\n      getState: {},\n      beforeRemove: {},\n    })\n  );\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n","import * as React from 'react';\n\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport type { NavigationProp } from './types';\n\n/**\n * Hook to access the navigation prop of the parent screen anywhere.\n *\n * @returns Navigation prop of the parent screen.\n */\nexport default function useNavigation<\n  T = NavigationProp<ReactNavigation.RootParamList>\n>(): T {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationContext);\n\n  if (navigation === undefined && root === undefined) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  // FIXME: Figure out a better way to do this\n  return (navigation ?? root) as unknown as T;\n}\n","import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n","import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n","import * as React from 'react';\n\nimport createNavigationContainerRef from './createNavigationContainerRef';\nimport type { NavigationContainerRefWithCurrent } from './types';\n\nexport default function useNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const navigation =\n    React.useRef<NavigationContainerRefWithCurrent<ParamList> | null>(null);\n\n  if (navigation.current == null) {\n    navigation.current = createNavigationContainerRef<ParamList>();\n  }\n\n  return navigation.current;\n}\n","import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  id: string | undefined;\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({\n  id: navigatorId,\n  onAction,\n  getState,\n  emitter,\n  router,\n}: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = (...args: any) => dispatch(actions[name](...args));\n      return acc;\n    }, {} as ActionHelpers);\n\n    const navigationHelpers = {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getId: () => navigatorId,\n      getParent: (id?: string) => {\n        if (id !== undefined) {\n          let current = navigationHelpers;\n\n          while (current && id !== current.getId()) {\n            current = current.getParent();\n          }\n\n          return current;\n        }\n\n        return parentNavigationHelpers;\n      },\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> & ActionHelpers;\n\n    return navigationHelpers;\n  }, [\n    navigatorId,\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n","import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type { NavigationProp } from './types';\n\ntype Options = {\n  key?: string;\n  navigation?: NavigationProp<ParamListBase>;\n  options?: object | undefined;\n};\n\nexport default function useOptionsGetters({\n  key,\n  options,\n  navigation,\n}: Options) {\n  const optionsRef = React.useRef<object | undefined>(options);\n  const optionsGettersFromChildRef = React.useRef<\n    Record<string, () => object | undefined | null>\n  >({});\n\n  const { onOptionsChange } = React.useContext(NavigationBuilderContext);\n  const { addOptionsGetter: parentAddOptionsGetter } = React.useContext(\n    NavigationStateContext\n  );\n\n  const optionsChangeListener = React.useCallback(() => {\n    const isFocused = navigation?.isFocused() ?? true;\n    const hasChildren = Object.keys(optionsGettersFromChildRef.current).length;\n\n    if (isFocused && !hasChildren) {\n      onOptionsChange(optionsRef.current ?? {});\n    }\n  }, [navigation, onOptionsChange]);\n\n  React.useEffect(() => {\n    optionsRef.current = options;\n    optionsChangeListener();\n\n    return navigation?.addListener('focus', optionsChangeListener);\n  }, [navigation, options, optionsChangeListener]);\n\n  const getOptionsFromListener = React.useCallback(() => {\n    for (let key in optionsGettersFromChildRef.current) {\n      if (optionsGettersFromChildRef.current.hasOwnProperty(key)) {\n        const result = optionsGettersFromChildRef.current[key]?.();\n\n        // null means unfocused route\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }, []);\n\n  const getCurrentOptions = React.useCallback(() => {\n    const isFocused = navigation?.isFocused() ?? true;\n\n    if (!isFocused) {\n      return null;\n    }\n\n    const optionsFromListener = getOptionsFromListener();\n\n    if (optionsFromListener !== null) {\n      return optionsFromListener;\n    }\n\n    return optionsRef.current;\n  }, [navigation, getOptionsFromListener]);\n\n  React.useEffect(() => {\n    return parentAddOptionsGetter?.(key!, getCurrentOptions);\n  }, [getCurrentOptions, parentAddOptionsGetter, key]);\n\n  const addOptionsGetter = React.useCallback(\n    (key: string, getter: () => object | undefined | null) => {\n      optionsGettersFromChildRef.current[key] = getter;\n      optionsChangeListener();\n\n      return () => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete optionsGettersFromChildRef.current[key];\n        optionsChangeListener();\n      };\n    },\n    [optionsChangeListener]\n  );\n\n  return {\n    addOptionsGetter,\n    getCurrentOptions,\n  };\n}\n","import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n","import * as React from 'react';\n\nimport PreventRemoveContext from './PreventRemoveContext';\n\nexport default function usePreventRemoveContext() {\n  const value = React.useContext(PreventRemoveContext);\n\n  if (value == null) {\n    throw new Error(\n      \"Couldn't find the prevent remove context. Is your component inside NavigationContent?\"\n    );\n  }\n\n  return value;\n}\n","import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => nanoid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\\n\\nThis can also happen if there are multiple copies of '@react-navigation' packages installed.\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n\n  return key;\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { RouteProp } from './types';\n\n/**\n * Hook to access the route prop of the parent screen anywhere.\n *\n * @returns Route prop of the parent screen.\n */\nexport default function useRoute<T extends RouteProp<ParamListBase>>(): T {\n  const route = React.useContext(NavigationRouteContext);\n\n  if (route === undefined) {\n    throw new Error(\n      \"Couldn't find a route object. Is your component inside a screen in a navigator?\"\n    );\n  }\n\n  return route as T;\n}\n","import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n","import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n","import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n","const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n","import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n","import type { ParamListBase } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport type { LinkingOptions } from './types';\n\nconst LinkingContext = React.createContext<{\n  options: LinkingOptions<ParamListBase> | undefined;\n}>({ options: undefined });\n\nLinkingContext.displayName = 'LinkingContext';\n\nexport default LinkingContext;\n","import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n","import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n","import * as React from 'react';\n\nexport type ServerContextType = {\n  location?: {\n    pathname: string;\n    search: string;\n  };\n};\n\nconst ServerContext = React.createContext<ServerContextType | undefined>(\n  undefined\n);\n\nexport default ServerContext;\n","import escapeStringRegexp from 'escape-string-regexp';\n\nexport default function extractPathFromURL(prefixes: string[], url: string) {\n  for (const prefix of prefixes) {\n    const protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n    const host = prefix\n      .replace(new RegExp(`^${escapeStringRegexp(protocol)}`), '')\n      .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n    const prefixRegex = new RegExp(\n      `^${escapeStringRegexp(protocol)}(/)*${host\n        .split('.')\n        .map((it) => (it === '*' ? '[^/]+' : escapeStringRegexp(it)))\n        .join('\\\\.')}`\n    );\n\n    const normalizedURL = url.replace(/\\/+/g, '/');\n\n    if (prefixRegex.test(normalizedURL)) {\n      return normalizedURL.replace(prefixRegex, '');\n    }\n  }\n\n  return undefined;\n}\n","export { default as Link } from './Link';\nexport { default as LinkingContext } from './LinkingContext';\nexport { default as NavigationContainer } from './NavigationContainer';\nexport { default as ServerContainer } from './ServerContainer';\nexport { default as DarkTheme } from './theming/DarkTheme';\nexport { default as DefaultTheme } from './theming/DefaultTheme';\nexport { default as ThemeProvider } from './theming/ThemeProvider';\nexport { default as useTheme } from './theming/useTheme';\nexport * from './types';\nexport { default as useLinkBuilder } from './useLinkBuilder';\nexport { default as useLinkProps } from './useLinkProps';\nexport { default as useLinkTo } from './useLinkTo';\nexport { default as useScrollToTop } from './useScrollToTop';\nexport * from '@react-navigation/core';\n","import type { Theme } from '../types';\n\nconst DarkTheme: Theme = {\n  dark: true,\n  colors: {\n    primary: 'rgb(10, 132, 255)',\n    background: 'rgb(1, 1, 1)',\n    card: 'rgb(18, 18, 18)',\n    text: 'rgb(229, 229, 231)',\n    border: 'rgb(39, 39, 41)',\n    notification: 'rgb(255, 69, 58)',\n  },\n};\n\nexport default DarkTheme;\n","import type { Theme } from '../types';\n\nconst DefaultTheme: Theme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(0, 122, 255)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(216, 216, 216)',\n    notification: 'rgb(255, 59, 48)',\n  },\n};\n\nexport default DefaultTheme;\n","import * as React from 'react';\n\nimport type { Theme } from '../types';\nimport DefaultTheme from './DefaultTheme';\n\nconst ThemeContext = React.createContext<Theme>(DefaultTheme);\n\nThemeContext.displayName = 'ThemeContext';\n\nexport default ThemeContext;\n","import * as React from 'react';\n\nimport type { Theme } from '../types';\nimport ThemeContext from './ThemeContext';\n\ntype Props = {\n  value: Theme;\n  children: React.ReactNode;\n};\n\nexport default function ThemeProvider({ value, children }: Props) {\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n}\n","import * as React from 'react';\n\nimport ThemeContext from './ThemeContext';\n\nexport default function useTheme() {\n  const theme = React.useContext(ThemeContext);\n\n  return theme;\n}\n","import type {\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { BackHandler } from 'react-native';\n\nexport default function useBackButton(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>\n) {\n  React.useEffect(() => {\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      () => {\n        const navigation = ref.current;\n\n        if (navigation == null) {\n          return false;\n        }\n\n        if (navigation.canGoBack()) {\n          navigation.goBack();\n\n          return true;\n        }\n\n        return false;\n      }\n    );\n\n    return () => subscription.remove();\n  }, [ref]);\n}\n","export default function useDocumentTitle() {\n  // Noop for React Native\n}\n","import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n","import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n","import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n","import {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      // Storing this in a local variable stops Jest from complaining about import after teardown\n      const removeEventListener = Linking.removeEventListener?.bind(Linking);\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          removeEventListener?.('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback(\n    (url: string | null | undefined) => {\n      if (!url || (filterRef.current && !filterRef.current(url))) {\n        return undefined;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n\n      return path !== undefined\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    },\n    []\n  );\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const state = getStateFromURL(url);\n\n          return state;\n        });\n      }\n\n      state = getStateFromURL(url);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${\n                typeof e === 'object' && e != null && 'message' in e\n                  ? // @ts-expect-error: we're already checking for this\n                    e.message\n                  : e\n              }`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n","import { EventArg, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let current = navigation;\n\n    // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener(\n      // We don't wanna import tab types here to avoid extra deps\n      // in addition, there are multiple tab implementations\n      // @ts-expect-error\n      'tabPress',\n      (e: EventArg<'tabPress', true>) => {\n        // We should scroll to top only when the screen is focused\n        const isFocused = navigation.isFocused();\n\n        // In a nested stack navigator, tab press resets the stack to first screen\n        // So we should scroll to top only when we are on first screen\n        const isFirst =\n          navigation === current ||\n          navigation.getState().routes[0].key === route.key;\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({ x: 0, y: 0, animated: true });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({ offset: 0, animated: true });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n            }\n          }\n        });\n      }\n    );\n\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n","import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  let initialState: [boolean, T | undefined] = [false, undefined];\n\n  // Check if our thenable is synchronous\n  promise.then((result) => {\n    initialState = [true, result];\n  });\n\n  const [state, setState] = React.useState(initialState);\n  const [resolved] = state;\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n","import type { NavigationState, PartialState, Route } from './types';\n\ntype ResetState =\n  | PartialState<NavigationState>\n  | NavigationState\n  | (Omit<NavigationState, 'routes'> & {\n      routes: Omit<Route<string>, 'key'>[];\n    });\n\nexport type Action =\n  | {\n      type: 'GO_BACK';\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'NAVIGATE';\n      payload:\n        | {\n            key: string;\n            name?: undefined;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          }\n        | {\n            name: string;\n            key?: string;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'RESET';\n      payload: ResetState | undefined;\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'SET_PARAMS';\n      payload: { params?: object };\n      source?: string;\n      target?: string;\n    };\n\nexport function goBack(): Action {\n  return { type: 'GO_BACK' };\n}\n\nexport function navigate(\n  options:\n    | { key: string; params?: object; path?: string; merge?: boolean }\n    | {\n        name: string;\n        key?: string;\n        params?: object;\n        path?: string;\n        merge?: boolean;\n      }\n): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(name: string, params?: object): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(...args: any): Action {\n  if (typeof args[0] === 'string') {\n    return { type: 'NAVIGATE', payload: { name: args[0], params: args[1] } };\n  } else {\n    const payload = args[0] || {};\n\n    if (!payload.hasOwnProperty('key') && !payload.hasOwnProperty('name')) {\n      throw new Error(\n        'You need to specify name or key when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.'\n      );\n    }\n\n    return { type: 'NAVIGATE', payload };\n  }\n}\n\nexport function reset(state: ResetState | undefined): Action {\n  return { type: 'RESET', payload: state };\n}\n\nexport function setParams(params: object): Action {\n  return { type: 'SET_PARAMS', payload: { params } };\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n","import * as CommonActions from './CommonActions';\n\nexport { CommonActions };\n\nexport { default as BaseRouter } from './BaseRouter';\nexport type {\n  DrawerActionHelpers,\n  DrawerActionType,\n  DrawerNavigationState,\n  DrawerRouterOptions,\n  DrawerStatus,\n} from './DrawerRouter';\nexport { DrawerActions, default as DrawerRouter } from './DrawerRouter';\nexport type {\n  StackActionHelpers,\n  StackActionType,\n  StackNavigationState,\n  StackRouterOptions,\n} from './StackRouter';\nexport { StackActions, default as StackRouter } from './StackRouter';\nexport type {\n  TabActionHelpers,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nexport { TabActions, default as TabRouter } from './TabRouter';\nexport * from './types';\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a \\unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook which returns the latest callback without changing the reference.\n */\nfunction useLatestCallback(callback) {\n    var ref = React.useRef(callback);\n    var latestCallback = React.useRef(function latestCallback() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // eslint-disable-next-line babel/no-invalid-this\n        return ref.current.apply(this, args);\n    }).current;\n    useIsomorphicLayoutEffect(function () {\n        ref.current = callback;\n    });\n    return latestCallback;\n}\nexports.default = useLatestCallback;\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableRest = require(\"./nonIterableRest.js\");\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n"],"names":["getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","React","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","useContext","NavigationStateContext","isDefault","Error","useSyncState","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","useChildListeners","listeners","addListener","useKeyedChildListeners","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","NOT_INITIALIZED_ERROR","navigation","canGoBack","result","handled","resetRoot","target","root","CommonActions","reset","getRootState","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","useOptionsGetters","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","defaultOnUnhandledAction","element","Provider","value","ScheduleUpdateContext","createContext","register","currentKey","unregister","SingleNavigatorContext","_","MISSING_CONTEXT_ERROR","useState","nanoid","parentId","Map","preventedRoutesMap","setPreventedRoutesMap","NavigationHelpersContext","NavigationRouteContext","preventRemoveContextValue","PreventRemoveContext","setParentPrevented","setPreventRemove","useLatestCallback","id","routeKey","preventRemove","every","prevPrevented","get","nextPrevented","set","delete","isPrevented","values","some","preventedRoutes","transformPreventedRoutes","screen","routeState","clearOptions","getCurrentState","currentRoute","find","r","setCurrentState","child","ScreenComponent","getComponent","component","render","memo","props","prevProps","nextProps","prevPropKeys","nextPropKeys","length","duplicates","getRouteNames","location","forEach","currentLocation","routeName","push","o","checkSerializableWithoutCircularReference","Set","seen","serializable","prototype","toString","call","Array","isArray","reason","String","has","add","i","childResult","methods","removeListener","event","callback","filter","cb","entries","args","Navigator","arguments","Group","Screen","index","k","v","hasOwnProperty","normalizedConfig","createNormalizedConfigItem","slice","initialRouteName","payload","config","screens","params","path","assign","initial","createNormalizedConfigs","CHILD_STATE","validatePathConfig","configs","allParams","pattern","focusedParams","focusedRoute","getActiveRoute","currentOptions","nestedRouteNames","hasNext","stringify","currentParams","fromEntries","split","p","startsWith","getParamName","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","queryString","sort","replace","joinPaths","paths","concat","Boolean","createConfigItem","parentPattern","exact","c","initialRoutes","parentScreens","remaining","segment","decodeURIComponent","createNestedStateObject","a","b","localeCompare","aParts","bParts","Math","max","aWildCard","bWildCard","it","match","matchAgainstConfigs","regex","RegExp","source","remainingPath","matchedParams","parse","routeConfig","initials","pop","escape","findInitialRoute","sameParents","createStateObject","initialRoute","isEmpty","flatConfig","shift","nestedState","nestedStateIndex","parseQueryParams","findParseConfigForRoute","parseConfig","aKeys","bKeys","PrivateValueStore","listener","removed","indexOf","splice","renderRef","NavigationContent","descriptors","CurrentRenderContext","screenOptions","defaultScreenOptions","onAction","onRouteFocus","router","setOptions","NavigationBuilderContext","navigations","useNavigationCache","useRouteCache","customOptions","curr","mergedOptions","listen","listenRef","callbacks","canPreventDefault","items","t","self","lastIndexOf","defineProperty","enumerable","defaultPrevented","defineProperties","preventDefault","effect","useNavigation","message","cleanup","destroy","unsubscribeFocus","unsubscribeBlur","NavigationContext","lastFocusedKeyRef","currentFocusedKey","lastFocusedKey","focusedListeners","setIsFocused","valueToReturn","useDebugValue","beforeRemove","NavigationContainerRefContext","createRouter","navigatorKey","useRegisterNavigator","screenListeners","rest","routeConfigs","getRouteConfigsFromChildren","routeKeyList","routeParamList","initialParams","routeGetIdList","getId","isStateValid","isStateInitialized","currentState","stateCleanedUp","cleanUpState","initialRouteParamList","initialParamsFromParams","getRehydratedState","getInitialState","initializedState","isFirstStateInitialization","previousRouteKeyListRef","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","getStateForRouteNamesChange","routeKeyChanges","previousNestedParamsRef","previousParams","navigate","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","e","useFocusEvents","childListeners","useOnAction","actionListeners","beforeRemoveListeners","routerConfigOptions","useOnRouteFocus","useNavigationHelpers","useFocusedListenersChildrenAdapter","useOnGetState","getStateListeners","useDescriptors","useCurrentRender","useComponent","isValidKey","groupKey","groupOptions","Children","toArray","isValidElement","navigationKey","JSON","Fragment","cache","actions","actionCreators","previous","thunk","withStack","process","helpers","createNavigationContainerRef","navigatorId","UnhandledActionContext","parentNavigationHelpers","op","navigationHelpers","goBack","selector","setResult","selectorRef","onActionParent","onRouteFocusParent","addListenerParent","routerConfigOptionsRef","visitedNavigators","shouldPreventRemove","shouldFocus","shouldActionChangeFocus","useOnPreventRemove","childState","VISITED_ROUTE_KEYS","Symbol","currentRoutes","nextRoutes","nextRouteKeys","removedRoutes","includes","reverse","visitedRouteKeys","beforeRemoveAction","sourceRouteKey","getStateForRouteFocus","optionsRef","optionsGettersFromChildRef","parentAddOptionsGetter","optionsChangeListener","hasChildren","getOptionsFromListener","optionsFromListener","getter","useRoute","usePreventRemoveContext","beforeRemoveListener","container","proxy","from","UNINTIALIZED_STATE","isSchedulingRef","isMountedRef","trackingState","setTrackingState","validKeys","invalidKeys","formatToList","to","useLinkProps","onPress","createElement","Text","Platform","select","web","onClick","default","LinkingContext","displayName","global","REACT_NAVIGATION_DEVTOOLS","WeakMap","theme","DefaultTheme","linking","fallback","documentTitle","onReady","isLinkingEnabled","enabled","refContainer","useBackButton","useDocumentTitle","useLinking","prefixes","getStateFromPath","getPathFromState","getActionFromState","useThenable","isResolved","linkingContext","onReadyRef","url","prefix","protocol","host","escapeStringRegexp","prefixRegex","normalizedURL","test","dark","colors","primary","background","card","text","border","notification","ThemeContext","subscription","BackHandler","addEventListener","remove","getRootStateForNavigate","parent","parentState","linkTo","useLinkTo","getPathFromStateHelper","href","getStateFromParams","accessibilityRole","shouldHandle","OS","metaKey","altKey","ctrlKey","shiftKey","button","currentTarget","getInitialURL","Promise","race","Linking","resolve","subscribe","removeEventListener","bind","getStateFromPathDefault","getActionFromStateDefault","enabledRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","getStateFromURL","extractPathFromURL","then","thenable","onfulfilled","catch","rootState","warn","unsubscribe","isFirst","requestAnimationFrame","scrollable","getScrollResponder","getNode","getScrollableNode","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo","promise","resolved","cancelled","findIndex","defaultStatus","TabRouter","isDrawerInHistory","history","addDrawerToHistory","status","removeDrawerFromHistory","closeDrawer","openDrawer","DrawerActions","TabActions","toggleDrawer","BaseRouter","min","count","merge","StackActions","popToTop","backBehavior","getRouteHistory","changeIndex","previousKey","TYPE_ROUTE","jumpTo","initialRouteIndex","unshift","for","d","f","g","h","l","m","n","q","w","z","u","$$typeof","A","exports","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","ForwardRef","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","module","token","singleMatcher","multiMatcher","decodeComponents","components","err","left","right","decode","input","tokens","encodedURI","TypeError","replaceMap","exec","customDecodeURIComponent","string","obj","predicate","ret","isArr","val","strictUriEncode","decodeComponent","splitOnFirst","filterObject","encodeFragmentIdentifier","validateArrayFormatSeparator","encode","strict","keysSorter","Number","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","arrayFormat","arrayFormatSeparator","formatter","accumulator","isEncodedArray","newValue","item","arrayValue","parserForArrayFormat","object","shouldFilter","skipNull","skipEmptyString","keyValueSep","encoderForArrayFormat","objectCopy","parseUrl","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","getHash","pick","exclude","exclusionFilter","separator","separatorIndex","str","charCodeAt","toUpperCase","__createBinding","this","k2","__setModuleDefault","__importStar","mod","__esModule","useIsomorphicLayoutEffect","document","useLayoutEffect","latestCallback","_i","apply","arr","len","arr2","arrayLikeToArray","asyncGeneratorStep","gen","reject","_next","_throw","arg","info","done","fn","instance","Constructor","_defineProperties","descriptor","configurable","writable","protoProps","staticProps","iter","iterator","_s","_e","_arr","_n","_d","next","objectWithoutPropertiesLoose","excluded","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","sourceKeys","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arrayWithoutHoles","iterableToArray","nonIterableSpread","minLen","constructor","size","random","customAlphabet","alphabet","defaultSize"],"sourceRoot":""}